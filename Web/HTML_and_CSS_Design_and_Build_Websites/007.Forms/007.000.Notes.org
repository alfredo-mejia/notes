#+title: Chapter 7: Forms
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bulma@1.0.4/css/bulma.min.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%} .content ul:not(:first-child) {margin-top: 0.25em}}</style>

* Navigation                                                                                                                                                                                                          
| Nav   | Title                                  | Links                                   |
|-------+----------------------------------------+-----------------------------------------|
| Index | Notes Home                             | \vert [[file:../../../index.html][html]] \vert [[file:../../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | HTML & CSS - Design and Build Websites | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/HTML_and_CSS_Design_and_Build_Websites][github]] \vert |
| Prev  | Chapter 6: Tables                      | \vert [[file:../006.Tables/006.000.Notes.html][html]] \vert [[file:../006.Tables/006.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/HTML_and_CSS_Design_and_Build_Websites/006.Tables][github]] \vert |
| Next  | Chapter 8: Extra Markup                | \vert [[file:../008.Extra_Markup/008.000.Notes.html][html]] \vert [[file:../008.Extra_Markup/008.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/HTML_and_CSS_Design_and_Build_Websites/008.Extra_Markup][github]] \vert |

* Notes

** Section 7.1: Introduction to Forms
   - A form has referred to a /printed/ document that contains spaces for you to fill in information
   - HTML borrows the concept of a form to refer to different elements that allow you to collect information / data from visitors (users) to your site
   - An example of forms used in HTML are search boxes used by google or any search engine, when creating a new account online, when shopping online, or when signing up for newsletters or mailing lists
   - There are several types of form controls that you can use to collect information from visitors to your site
     - Text Input: Used for a single line of text such as email addresses and names
     - Password Input: Like a single line text box but it masks (hides) the characters entered
     - Text Area: For longer areas of text that need / can span multiple lines such as messages or comments
     - Radio Buttons: Used when a user must select *one* of a number of options
     - Checkboxes: Used when a user needs select or unselect one or more options
     - Drop-down Boxes: Used when a user must pick one of a number of options from a list
     - Submit Buttons: Used to submit data from your form to another web page
     - Image Buttons: Similar to submit buttons but they allow you to use an image as the button
     - File Upload: Allows users to upload files to a website

** Section 7.2: How Forms Work
   - A user fills in a form and then presses a button to submit the information to the server
   - The name of each form control is sent to the server along with the value the user enters or selects
   - The server processes the information using a programming language (PHP, C#, VB.net, or Java) in the backend server and the backend server may even communicate with a database
   - The server creates a new page to send back to the browser based on the information received or sends some type of data back to the browser for the browser to display some update either a success or an error
   - Keep in mind a form may have several form controls, each gather different information and the backend server needs to know which piece of inputted data corresponds with which form element
   - To differentiate between various pieces of inputted data, information is sent from the browser to the server using name / value pairs
   - What does it mean by name / value pairs? For example, let's say we have a form that asks for a username and the user enters john123 then what is sent the server is ~username=john123~
   - A pair is sent to the server; this pair includes the name of the data and the value of the data
   - How do we specify that in the form element? We use the ~name~ attribute to specify the name of the data (in the example of above we need specify "username") and to specify the value, you either get it from the user or if it is a fixed set of answers then you use the ~value~ attribute to specify the value of the data (or input)
   - Remember, how would a server distinguish between multiple inputs? It will distinguish them by their "names" thus when specified in the ~name~ attribute you have to make sure the backend server understands the name because using the name it will retrieve the value for that specific input control
     
** Section 7.3: Form Structure
   - Form controls live inside a ~<form>~ element and this element should always carry the action attribute and will usually have a method and id attribute too
   - The ~action~ attribute is required and its value is the URL for the page on the server that will receive the information in the form when it is submitted (in other words it is the URL that the browser will send the information to)
   - Recall a URL is an address for a server, in our case, this will be the backend server
   - Forms can be sent using one of two methods: get or post
   - With the get method, the values from the form are added to the end of the URL specified in the ~action~ attribute
   - The get method is ideal for:
     - Short forms such as search boxes
     - When you are just retrieving data from the web server (not sending information that should be added to or deleted from a database)
   - With the post method the values are sent in what are known as HTTP headers
   - The post method is ideal for:
     - Allowing users to upload a file in your form
     - The form is very long
     - If the form may contain sensitive data such as passwords
     - The form adds information to or deletes information from a database
   - You specify the type of method using the ~method~ attribute and specify either ~get~ or ~post~
   - If the method attribute is not used, the form data will be sent using the get method by default
   - Finally, it is ideal to add an ~id~ attribute to the form element to distinct it from other elements on the page which are often used by scripts for input validation

** Section 7.4: Text Input
   - The ~<input>~ element is used to create several different form controls depending on the value of the ~type~ attribute
   - The ~type~ attribute determines what kind of input they will be creating
   - The ~<input>~ are used for single-line text inputs
   - We also have ~<textarea>~ element which is used to create multi-line text inputs

*** Section 7.4.1: Input Type Text
    - The ~type="text"~ means the ~type~ attribute has a value of ~text~ which creates a single-line text input
    - The ~name~ attribute identifies the form control and is sent along with the information they entered to the server
    - Recall from our previous discussion, the data is sent a name/value pair so we need to tell the server the name of the form control and its value
    - The name is specified by the ~name~ attribute so the server knows which form control each piece of data was entered into
    - Although name is not required, in the sense that the browser will not render, but it is recommneded ("required") in the sense if not specified there is no way to retrieve the value in the backend
    - Another attribute to input type text is ~size~ however using ~size~ is no longer recommended but it was an older way to indicate the width of the text input measured by the number of characters that would be seen at one time in the text box
    - In new forms, CSS is used to control the width of form elements
    - ~maxlength~ is another attribute to input type text and it limits the number of characters a user may enter into the text field
    - The value of the attribute ~maxlength~ is the number of of characters they may enter 

*** Section 7.4.2: Input Type Password
    - Another type of input is the password type and can be specified by having the type attribute to be ~type="password"~
    - When the type attribute has a value of password it creates a text box that acts just like a single-line text input, except the characters are blocked / masked / hidden out
    - The same attributes can be applied here as the input type text; you can specify the ~name~, the ~size~, and the ~maxlength~
    - Note that just because the password is hidden does not mean that the data in a password control is sent securely to the server
    - For full security, the server needs to be set up to communicate with the users' browsers using Secure Sockets Layer (SSL) (this topic is beyond the scope of the book)

*** Section 7.4.3: Text Area
    - The ~<textarea>~ element is used to create a multi-line text input
    - Unlike the ~<input>~ element this element does not have to be an empty element, you can add text to inside the element
    - Therefore this element has an opening and closing tag
    - Any text that appears between the opening ~<textarea>~ and closing ~</textarea>~ tags will appear in the text box when the page loads so the user may to append to the text or delete the existing text or leave it how it is
    - If the user does not delete any text between these tags, this message (what is inside the element) will be sent to the server along with whatever the user has typed
    - Some sites use JavaScript to clear the text when the user clicks in the text area and those cites use the text inside the element as a hint using JS
    - Some older attributes include ~cols~ and ~rows~ which specify how many columns (basically how many characters you want the width to be) and how many rows (space taken vertically) you want the text area to have thus controlling the width and height of the text area
    - This is not recommended as now CSS is used to control the width and height of a text area
      
** Section 7.5: Multiple Options Input
   - We continue using the ~<input>~ element but now we use the ~type="radio"~; radio buttons allow users to pick just one of a number of options
   - Another type using the ~<input>~ element is the ~type="checkbox"~; checkboxes allow users to select and deselect one or more options for a question
   - The ~<select>~ element creates a drop down list box (also known as a select box) that allows users to select one option from a drop down list

*** Section 7.5.1: Input Type Radio
    - To create a single radio button you use the ~<input>~ element and specify the type to be ~type="radio"~
    - However, when dealing with radio buttons you are normally dealing with multiple radio buttons, not just one
    - So how do you group multiple single radio buttons to associated with a single question? The answer is giving them the same name
    - Radio buttons allow users to pick just one of a number of options so there will be only one value for one name
    - Thus the value of the ~name~ attribute should be the same for all the radio buttons used for the same question as this is the value that will be sent to the server along with the name
    - The ~value~ attribute indicates the value that is sent to the server for the selected option thus the value of each of the radio buttons in a group should be different because they represent different options and will be sent to the server so it wouldn't make sense for multiple radio buttons to have the same value because then the server will treat them the same
    - The radio buttons need different values for the server to distinguish the options and respond appropriately
    - The ~checked~ attribute can be used like ~checked="checked"~ to indicate which value (if any) should the default selection when the page loads
    - Only one radio button in a group should use this attribute
    - Note, once a radio button has been selected it cannot be deselected, it can only be changed by selecting a different option
    - If you need an input option that allows user to select and deselect it'll be better to use a checkbox (even if it is a single checkbox and not multiple); an example is a checkbox indicating if the user agrees to the terms and conditions

*** Section 7.5.2: Input Type Checkbox
    - To create checkboxes you use the ~<input>~ element with the type attribute to be ~type="checkbox"~
    - Checkboxes allow users to select (and deselect) one or more options on an answer to a question
    - Again using the ~<input>~ with the type of the type checkbox, it creates one checkbox, you need to state multiple ~<input>~ with the type checkbox to create multile checkboxes
    - How do you group them? The same way you group the radio buttons by giving them the same value in the ~name~ attribute
    - The value of option is specified in the ~value~ attribute and should be different for each checkbox in the same question / name
    - The ~checked~ attribute can also be used to indicate the default values of which checkbox should be checked when the page loads

*** Section 7.5.3: Drop Down List Box
    - Using the ~<select>~ element you can create a drop down list box (also known as a select box) which allows users to select one option from a drop down list
    - Inside the ~<select>~ element you use two or more ~<option>~ elements to specify the options in the drop down list
    - The attribute ~name~ is specified in the ~<select>~ element and it is the name of the form control being sent to the server along with the value the user has selected
    - Like stated, ~<option>~ element is used to specify the options that the user can select from
    - The words between the opening and closing tags of ~<option>~ will be shown to the user in the drop down box
    - The value of the ~<option>~ is stated using the ~value~ attribute in the ~<option>~ element and it will indicate the value that is sent to the server along with the name (stated in the ~<select>~ element) of the form control
    - You can also specify the ~selected~ attribute to indicate the default option that will be by default selected when the page loads, the attribute should be specify like ~selected="selected"~
    - If this attribute is not used the first option will be shown when the page loads and if the user did not select an option (left it how it is) then the first item will be sent to the server as the value for this form control
    - You can only choose one option from the drop down list; so what makes it different than the radio buttons? Well for smaller number of options radio buttons work best but for a long list of options then a drop down is best
    - Another useful attribute in the ~<select>~ element is the ~size~ attribute
    - The ~size~ attribute can turn a drop down select box from displaying only one option to showing multiple options at once
    - The value of the ~size~ attribute should be the number of options you want to show at once
    - Finally, another attribute is ~multiple="multiple"~, using this attribute you allow users to select multiple options from the list
    - If you are going to allow the user to select multiple options then it is best to indicate to the user they are able to select more than one option at a time

** Section 7.6: Other Types of Input

*** Section 7.6.1: Input Type File
    - If you want to allow users to upload a file like an image, pdf, etc. you will need to use a file input with the type ~type="file"~
    - This type of input creates a box that looks like a text input followed by a ~Browse~ button
    - When the user clicks on the ~Browse~ button, a window opens up that allows them to select a file from their computer to be uploaded to the website
    - When you are allowing users to upload files, the ~method~ attribute of the ~<form>~ element must have a value of ~post~ as you cannot send files using HTTP ~get~ method

*** Section 7.6.2: Input Type Submit Button
    - You can also use the input to be of type ~type="submit"~ which will create a submit button that will send the form to the server
    - It can use the ~name~ attribute but it does not need to have one
    - The ~value~ attribute is used to control the text that appears on the input button (the default text is "Submit" so it is best to override this with the attribute ~value~)
    - Browsers have a default styling for input buttons but this can be changed with CSS or image buttons

*** Section 7.6.3: Input Type Image Button
    - You can also use the input to be of type ~type="image"~ if you want to use an image for the submit button
    - To specify the image you will need to specify the ~src~ attribute in the input element
    - The ~width~, ~height~, and ~alt~ attributes will all work for the input element as they do for the ~<img>~ element

*** Section 7.6.4: Buttons
    - The ~<button>~ element was introduced to allow users more control over how their buttons appear and to allow other elements to appear inside the button
    - This means you can combine text and images between the opening and closing tags of the button element
    - For example:
      #+BEGIN_SRC html
      <button>
        <img />
	text
      </button>
      #+END_SRC

*** Section 7.6.5: Input Type Hidden
    - The input type ~type="hidden"~ and these form controls are not shown on the page (although you can see them if you use the View Source option in the browser)
    - They allow page authors to add values to form that users cannot see
    - For example, a hidden form control can be added to indicate which page the user was on when they submitted a form

** Section 7.7: Labeling & Grouping Form Elements

*** Section 7.7.1: Labeling Form Controls
    - When creating a single-line text box in a form you use the input element and the type to be text but how would the user know what to type? A hint can be used but a prompt outside the text box would be best
    - How do you add a prompt outside the text box? You could just add text with the ~<p>~ element before or after you include the text element but the best way is to use a ~<label>~ element
    - Each form control should have its own ~<label>~ element as this makes the form accessible to vision-impaired users who are using screen-reader software
    - There are two ways to use the label element
      1. Create an opening and closing tag for the label element; Inside the tags you will write down the description *and* the the form control (e.g. input element) so both the description and form control are inside the label element
	 #+BEGIN_SRC html
	   <label>First Name: <input type="text" name="firstname" /> </label>
	 #+END_SRC
      2. The second way is to keep the label and the form control separate and *not* embedded; So how do you associate (connect) them together? You use the ~for~ attribute on the label and give it the value of the id of the form control
	 - For example, let's say we want the first name of the user so we create a label and inside the label we add the text description
	 - After closing the label element we can then add the form control and give the form control an id called ~fc_firstname~
	 - You associate them by adding the ~for~ attribute to the ~<label>~ element and giving it the value of the id of the form control, in this case, ~fc_firstname~ as shown below
	   #+BEGIN_SRC html
	     <label for="fc_firstname">First Name: </label>
	     <input id="fc_firstname" type="text" name="firstname" />
	   #+END_SRC
    - The ~for~ attribute in the label states which form control the label belongs to
    - The value of the for attribute matches that of the id attribute on the form control it is labeling
    - This technique using the ~for~ and ~id~ attributes can be used on any form control
    - In addition, when the label is used with the form control then the users can click on either the form control or the label to select the form control
    - The position of the label is very important to clearly indicate where the form control is and what the form control is asking
    - Here are the best practices, you place the label above or the left of the form control for the following form controls:
      - Text inputs
      - Text areas
      - Select boxes
      - File uploads
    - You place the label to right of the form controls for the following form controls:
      - Individual checkboxes
      - Individual radio buttons

*** Section 7.7.2: Grouping Form Elements
    - You can group related form controls together inside the ~<fieldset>~ element (helpful for longer forms)
    - Most browsers will show the ~fieldset~ element with a line around the edge to show how they are related but the appearance can be changed or adjusted using CSS
    - The ~<legend>~ element can come directly after the opening ~<fieldset>~ tag and contains a caption which identify the purpose of that group of form controls
    - For example,
      #+BEGIN_SRC html
      <fieldset>
        <legend>Contact Details</legend>
	<label for="fc_email">Email: </label>
	<input id="fc_email" type="text" name="email" />
      </fieldset>
      #+END_SRC

** Section 7.8: HTML5 Form Validation
   - Form validation was normally done with JS but now wth HTML5 there are some form validations that can be done in HTML
   - Validating the form before it is sent to the server helps reduce the amount of work the server has to do, enables users to see if there are problems with the form rather than waiting on the server, and makes sure the server doesn't crash with unexpected data
   - One of the form validations is the ~required~ attribute
   - For HTML5, you can simply add the required attribute with no value but for HTML4 you must give it a value like so ~required="required"~
   - The required attribute ensures that form control is filled out by the user before submitting to the server
   - There are more ways to validate input with HTML5 but those kind of go in hand with the different types of input discussed in the next section
     
** Section 7.9: HTML5 Inputs

*** Section 7.9.1: Input Type Date
    - Before various information such as dates, emails, urls, etc. were gathered using text inputs but now with HTML5 we have dedicated input types for them
    - The input type ~type="date"~ will create a date input for users to enter a specific date
    - The appearance can be changed with CSS

*** Section 7.9.2: Input Type Email
    - For emails, you can specify for the ~<input>~ element the type to be ~type="email"~
    - Using this type will make browsers check that the user has provided an email in the correct format of a legitimate email address

*** Section 7.9.3: Input Type URL
    - For web page address, you can specify for the ~<input>~ element the type to be ~type="url"~
    - Using this type will make browsers check that the user has provided a URL in the correct format of a URL

*** Section 7.9.4: Input Type Search
    - For a dedicated form control (single-line) for search queries, you specify for the ~<input>~ element the type to be ~type="search"~
    - Different browsers treat the input type search differently but browsers may treat the input type search slighlty different than just a regular single-line text box
    - Also on *any* text input, you can also use an attribute called ~placeholder~ whose value is the text that will be shown in the text box until the user clicks in that area (it is basically a hint for text form controls)

** Section 7.10: Creating a Web Page with Forms
   - [[file:./007.010.Creating_A_Web_Page_with_Forms/index.html][Creating a Web Page with Forms]]
     
* Keywords
| Term              | Definition                                                                                                                                                                                                                                                                                                                   |
|-------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Form              | Document that contains spaces or "form controls" for the user to fill in information                                                                                                                                                                                                                                         |
| Backend Server    | A computer that the user cannot see which receives information from the browser and processes the information and responds in some way                                                                                                                                                                                       |
| Form Element      | This releemnt represents a document section containing interactive controls for submitting information                                                                                                                                                                                                                       |
| Get Method        | Get method is a HTTP request method which appends data to the URL and sends it the server                                                                                                                                                                                                                                    |
| Post Method       | Post method is a HTTP request method which appends the data to the request body of the HTTP request                                                                                                                                                                                                                          |
| Input Element     | HTML element used to create interactive controls for web-based forms and a variety of types are available depending on the value given in the ~type~ attribute                                                                                                                                                               |
| Text Area Element | HTML element used to represent a multi-line plain text editing control                                                                                                                                                                                                                                                       |
| Select Element    | A HTML element that represents a control that provides a menu of options (it is basically a way to create a menu to add options you simply use the ~option~ element)                                                                                                                                                         |
| Option Elment     | HTML element used to define an item contains in a ~select~, an ~optgroup~, or a ~datalist~ element; in our case we are concerned in the select element and shows an option to a list of options (a menu)                                                                                                                     |
| Button Element    | An interactive HTML element activated by a user with a mouse, keyboard, finger, voice command, or other assistive technology and can be used in forms as submit buttons                                                                                                                                                      |
| Label Element     | A HTML element used to represent a caption for an item in a user interface (in our case we can add a description to a form control to let the user know what we are asking and what they need to do)                                                                                                                         |
| Fieldset Element  | A fieldset element is used to group several form controls as well as labels within a web form (e.g. we have a long form divided into two parts personal info and hobbies, that means we can divide the form into two distict parts by grouping the form controls using fieldset; one for personal info the other for hobbies |
| Legend Element    | A HTML element that represents a caption for the content of its parent ~fieldset~ (basically it adds a description for the fieldset element)                                                                                                                                                                                 |
| Form Validation   | Form validation is ensuring the data inputted by the user is correct and in a format that is expected for the server to gracefully accept or reject                                                                                                                                                                          |

* Questions
  - *Q*: What is the difference between buttons and inputs type submit in a form? Do they behave the same? Does behavior change with the number of buttons / input type submits in the form?
         - According to the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input][Input Element Mozilla docs]] input is used to create interactive controls and using it with the ~type=submit~ it states that a button will be created and when clicked it will submit the form
	 - According to the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button][Button Element Mozilla docs]] button is an already interactive element activated by the user and with the ~type=submit~ it states the button submits the form data to the server
	 - According to the docs, the ~type=submit~ is the default for button if the attribute is not specified for buttons associated with a ~<form>~ or if the attribute is an empty or invalid value
	 - So how are buttons associated with a ~<form>~ element? You could specify the ~form~ attribute in the button element and the value must be the id of a ~<form>~ element in the same document
	 - If the attribute ~form~ is not then the button will be associated with its parent ancestor ~<form>~ element if any; in other words, if button is inside the form element it will automatically be associated if the ~form~ attribute is not used
	 - Here's an example a form with an input and some buttons [[file:./007.011.Questions/q1.html][example with multiple inputs and buttons]]
	 - As seen in the example, the number of inputs or buttons do not change behavior; if the input is type submit, it will submit the form doesn't matter the number of inputs
	 - The buttons will submit the form if no type is specified (or if submit type is specified) and it has a form associated (directly or indirectly) no matter the number of buttons having the same specs
	 - As to the behavior, both have the same function but for form submission it is generally best to use buttons because "input" semantically suggests the control is /editable/ when it is not because it is just a button
	 - According to other devs, buttons are easier to style with CSS which can help later, you can also nest inside other elements in button unlike the self closing input element
	 - Finally, to follow standards HTML5 spec suggests to use button instead of input
	   
  - *Q*: How do forms and field sets elements work together?
         - According to the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form][docs]] for the form element, the form element represents a document section containing interactive controls for submitting information
	 - What does this mean? This means somewhere in the web page there is a section that will contain interactive controls in some way thus form element is used to describe that section
	 - According to the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/fieldset][docs]] for the fieldset element, the fieldset element is used to group several controls as well as labels *within* a web form
	 - Thus form element is used to describe a section with form controls and fielset element is used to group form controls within a form
	 - So how are they connected? Well you create a form and /within/ that form you may want to divide the form into different sections or just group certain form controls together
	 - That is when you use fieldset element to group form controls and distinguish them differently from other grouped or non-grouped form controls
	 - You can make it different by changing the styling, adding a legend element, or some other way
	   
* Summary
  - HTML can create a form using different form elements to allow the user to enter information and the website stores this information and uses it in some way
  - Some examples of HTML form elements include text input, password input, text area, radio buttons, checkboxes, drop down boxes, submit boxes, image buttons, file uploads, etc.
  - This information is then sent to the backends server as name-value pairs; in other words each form control has a name to distinguish it from other form controls and a value to understand what info is the form control holding
  - How do we specify a name? We use the ~name~ attribute in the form control
  - How do we specify a value? Depending on the form control, we either use the ~value~ attribute or we get it from the user
  - The form element is used to represent a form and you use the ~action~ attribute to include the URL that will process the form submission data
  - There are two ways to submit forms: get or post
  - Get is great for short forms and post is great for large forms and sensitive information
  - Get attaches the info at the end of the URL while post uses HTTP headers
  - By default the method used is get but can be specified in the form element using the ~method~ attribute and specifying either ~get~ or ~post~
  - The input element is used to create several different form controls depending on the value of the ~type~ attribute
  - For example, you can use ~type~ to equal ~text~ or ~password~ which are single line text areas except for password the browsers hides or masks the characters typed
  - Another element is the text area element which represents a multi-line plain text editing controls used when you need the user to type long amounts of data
  - Other types of input are checkboxes and radio buttons, what is the difference? Well checkboxes can be deselected and you can select multiple checkboxes while radio buttons cannot be deselect unless another option is selected meaning you can only have one option
  - How do you group checkboxes or radio buttons? You provide the ~name~ attribute for all checkboxes / radio buttons and give it the same value thus each should have the same name attribute
  - Another form control is the select element which provide a dropdown menu
  - To add options to the dropdown you add the ~option~ element inside the ~select~ element
  - There are other types of input including file input, submit buttons, image buttons, hidden input, date input, email input, url input, search input, and more
  - The input type submit are similar to regular buttons, the difference is simply the input can only be used for submit forms while buttons can be used more generally including submitting forms (just like the input submit button)
  - Each form control should have a description for the user or assistive technology to understand what the form control is asking and expecting; to give it a description we use the ~label~ element
  - The label element will allow you to add a description for a form control but how do you associate a label and a form control? Well, you give the form control an id and then you give the label the ~for~ attribute and the value will be the id of whatever form control the label pertains to
  - Another way is to create a label and inside the label element you add the form control, so there are two ways to associate a form control with a label
  - What if you have a large form and want to group form elements into sections within a single form? In this case, you use the ~fieldset~ element
  - The fieldset element allows you to group form controls together which is helpful when you want to separate different parts of a form
  - You use the ~legend~ element inside the ~fieldset~ to give the fieldset element a description or title
  - Form validation was previously handled by JS but with the introduction of new input forms and new attributes some input validation can be done in HTML
  - For example, you can add required to HTML elements, a min / max number of characters, or you can use specific input types like date, url, email addresses which provide some input validation like ensuring the user can only select a date, the url conforms the format of a URL, the email addresses conforms the format of a legitimate email address, etc.
  
