#+title: Section 3: HTML - The Essentials
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bulma@1.0.4/css/bulma.min.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%} .content ul:not(:first-child) {margin-top: 0.25em}}</style>

* Navigation
| Nav   | Title                                    | Links                                   |
|-------+------------------------------------------+-----------------------------------------|
| Index | Notes Home                               | \vert [[file:../../../index.html][html]] \vert [[file:../../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | The Web Developer Bootcamp 2024          | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/The_Web_Developer_Bootcamp_2024][github]] \vert |
| Prev  | Section 2: Course Orientation            | \vert [[file:../002.An_Introduction_to_Web_Development/002.000.Notes.html][html]] \vert [[file:../002.An_Introduction_to_Web_Development/002.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/The_Web_Developer_Bootcamp_2024/002.An_Introduction_to_Web_Development][github]] \vert |
| Next  | Section 4: HTML - Next Steps & Semantics | \vert [[file:../004.HTML_Next_Steps_and_Semantics/004.000.Notes.html][html]] \vert [[file:../004.HTML_Next_Steps_and_Semantics/004.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/The_Web_Developer_Bootcamp_2024/004.HTML_Next_Steps_and_Semantics][github]] \vert |

* Resources
[[file:./003.HTML_The_Essentials_Slides.pdf][Section 3: HTML - The Essentials Slides]]

* Notes

** Section 3.1: What Matters In This Section
   - Paragraph elements, HTML headings, HTML lists, HTML anchor tags, HTML images, and HTML boilerplate are crucial parts of this section
   - MDN is an important resource

** Section 3.2: Introduction to HTML
   - HTML is the what is on the page (buttons, lists, headers, etc.)
   - HTML is HyperText Markup Language, it is not a programming language (you can't implemenet logic with HTML)
   - All that HTML does is "markup" a document or annotate a document or add more information to the current document
   - The goal of HTML is to take text (a document) and markup and add some structure to the document
   - For example, if you have a sentence like "I like donuts!"; how do you bold it and italicize it? Some syntax can be used to describe that "markup"
   - So what is this syntax? The syntax is HTML and HTML has HTML elements
   - Each HTML elements have something caled tags and the content you want to "markup" is enclosed by these tags (e.g. ~<tag> content </tag>~ )
   - So now you have a way to markup text in a document to be bold or italicized (although note that are some self-closing tags but those typically do not markup text in a document)
   - For example, if we want "I like donuts!" to be in bold I can just do "<b>I like donuts!</b>", notice how we now have a syntax to markup text
   - In reality, HTML has various HTML elements that used in a HTML document with various elements being nested in each other
   - Now we can do a lot with HTML like bold, headers, paragraphs, links, display images, lists, etc
     
** Section 3.3: Our Very First HTML Page
   - Whenever you don't close a tag, the browser will implement the markup from the opening tag to the end of the document because it is trying to find the closing tag but there is none
   - [[file:./003.003.Our_Very_First_HTML_Page/index.html][Here is the finished web page]]
     
** Section 3.4: Mozilla Developer Network
   - [[https://developer.mozilla.org/en-US/][Mozilla Developer Resources (Home)]]
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element][Mozilla Developer HTML Elements Reference]]
   - Think of Mozilla Developer resources as the Wikipedia of HTML, CSS, and JS

** Section 3.5: Paragraph Elements
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p][Mozilla Paragraph Element]]
   - The ~<p>~ HTML element represents a paragraph (hence paragraph element)
   - The paragraph element doesn't necessarily mean a paragraph of text (although often the case), a paragraph can be any related content that you want to group together such as images or form fields
   - Paragraphs are block-level elements and will automatically close if another block-level element is parsed or encountered (nested) befroe the closing ~</p>~ tag

** Section 3.6: Heading Elements
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Heading_Elements][Mozilla Heading Elements]]
   - The heading element represent six level of section headings with ~<h1>~ being the highest section level and ~<h6>~ being the lowest
   - All heading elements create a block-level box in the layout (starting on a new line and taking up the full width available in their containing block)
   - Do not use the headings just because of the size or style (because that can be changed in CSS)
   - Only have one h1 in the page nd it should always be the top level main heading
   - Always have the heading sections in order and do not skip heading sections (do not go from h2 to h4; you are skipping h3; do not do that, go in order)

** Section 3.7: HTML Boilerplate
   - Every HTML document needs structure needs the HTML boilerplate or "skeleton"

   #+BEGIN_SRC html
     <!DOCTYPE html>
     <html>
       <head>
	 <title></title>
       </head>

       <body>
       </body>
     </html>
   #+END_SRC

   - The ~DOCTYPE~ tells the browser we want or are using the latest version of HTML (HTML5)
   - ~<html>~ is the root element ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html][Mozilla HTML Element]]) and represetns the top-level (root) of an HTML document; all other elements must be descendants (nested) of this element
   - The html element can only have one ~<head>~ followed by one ~<body>~ element
   - The head element or Document Metadata element ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head][Mozilla Header Element]]) is all metadata or information about the page; this will not be displayed in the browser
   - The title element ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title][Mozilla Title Element]]) defines the document's title and it will be shown in the browser's title bar or page's tab
   - The body element ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body][Mozilla Body Element]]) represents all of the content of the document; there can only be one body in the document and everything that will be displayed in the browser will be in the body
   - This would be the skeleton of every HTML document we create from now on     

** Section 3.8: List Elements
   - There are two types of lists: unordered lists and ordered lists
   - ~<ol>~ is for ordered lists and ~<ul>~ is for unordered lists
   - Each list as a nested element called an list item
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ol][Mozilla Ordered List]], [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/ul][Mozilla Unordered List]], [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/li][Mozilla List Item]]
   - Inside list items, we can have more nested lists (ordered or unordered)
   - List items can have more nested elements unlike ~<ol>~ or ~<ul>~ which can only have ~<li>~ (and ~<script>~ and ~<template>~)

** Section 3.9: Anchor Tags
   - Anchor tags ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a][Mozilla Anchor Element]]) are used to create links to other web pages, files, email addresses, or just a location in the same page
   - The most common is creating hyperlinks to different web pages
   - The way it is used is by inserting the ~<a>~ and ~</a>~ tags placing the text that is going to be the link inside the tags
   - However by itself the anchor tags will not create the link
   - In addition to the anchor tags you will need to use the ~href~ attribute
   - ~href~ attribute will be the URL to the location of the file, section, email address, web page, etc
   - Anchor elements can use the links to point to other HTML files in the current working directory or in the same computer (if permissions allow)

** Section 3.10: Images
   - The image element ([[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img][Mozilla Image Element]]) allows for the browser to render an image into the document
   - To provide the location of the image we use an attribute called ~src~; this attribute is required and contains the path to the image you want to embed into the document
   - The image element is self-closing and does not need a closing tag
   - The src can be a local file or an image on the internet; the src attribute will embed the image into the HTML document
   - The alt attribute is definitely recommended to have for accessbility purposes or if the images does not load but the alt attribute is a text description of the image

** Section 3.11: Comments
   - Comments in a HTML file is not an element; it is just a way to add notes, feedback, reminders, etc
   - Comments are ignored by the browser; it is just for the developer to see the comments as reminders or explanations of the code written
   - The syntax for a comment is the following:

     #+BEGIN_SRC html
       <!-- Comment -->
     #+END_SRC

    - Notice the ~<!--~ in the beginning and then the end is ~-->~ and everything in between is considered a comment
     
* Keywords
| Term                  | Definition                                                                                                                                                                                                                |
|-----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| *HTML*                | HyperText Markup Language; it is not a programming language instead it is a markup language which means it has syntax to "markup" text (e.g. how to make it bold, how to make it italicized, how to make a heading, etc.) |
| *Paragraph Element*   | Represents a paragraph; doesn't necessarily mean a paragraph of text but it can also be content that you want to group together such as images or form elements                                                           |
| *Heading Element*     | Heading element represetns six level of section headings                                                                                                                                                                  |
| *HTML Boilerplate*    | Every HTML document needs structure and this structure is the skeleton of the document and it is the same across every HTML document                                                                                      |
| *HTML Root Element*   | The root element is the outer most HTML element and can only have two children: one for head and one for body                                                                                                             |
| *HTML Head Element*   | The metadata element (header) contains all the metadata of the webpage; none of the content gets displayed is just metadata for the browser                                                                               |
| *HTML Body Element*   | The body element contains all the content that will be displayed and rendered by the browser                                                                                                                              |
| *HTML List Element*   | The list element creates a list in HTML; it can be ordered (~<ol>~) or unordered (~<ul>~)                                                                                                                                 |
| *HTML Anchor Element* | Anchor element is used to create hyperlinks to files, other web pages, email addresses, etc                                                                                                                               |
| *HTML Image Element*  | Image element is self closing and is used to embed an image (from a local file or from a server) into the document                                                                                                        |
| *Comments*            | Comments are ignored by the browser and are only for the developer to see as notes, reminders, TODO list, explanations, etc                                                                                               |

* Questions
  - *Q*: What can go inside the header element?
         - It can contain one or more elements of metadata content and exactly one ~<title>~ element
	   
  - *Q*: What are metadata elements?
         - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta][Mozilla Metadata Element]] - According to the docs, the metadata element represents metadata that cannot be represented by other HTML meta-related elements
         - There are various metadata that can be represented by the meta element
         - It can define keywords for search engines, description, author, refresh document every X seconds, set the viewport, and many more
         - The way it works is that there are four attributes mainly used meta: name, http-equiv, charset, and itemprop
         - Let's first look at name; name is used along with the attribute called content these two attributes work together to specify some metadata
	   - According to mozilla docs: the name and content attributes can be used together to provide document metadata in terms of name-value pairs, with the name attribute giving the metadata name, and the content attribute giving the value
	   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta/name][Mozilla Standard Metadata Names]]
	   - So basically to provide some metadata we use the attribute ~name~ and give it the value author, description, keywords, etc. whatever we want to provide info about and then the attribute content would be the value of that metadata
         - The next attribute that the meta element can use is the ~http-equiv~; according to the docs if this attribute is set the element would be a pragma directive providing info equivalent to what can be given by a similarly-named HTTP header
	   - So basically instead of modifying or adding some specification to the HTTP header request, we do so in the meta element
	   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/meta#http-equiv][Mozilla http-equiv Docs]]
	   - This includes values like ~content-security-policy~, ~content-type~, ~refresh~, ~default-style~, and ~x-ua-compatible~
	   - The content attribute needs to be used too to provide a value to the attribute ~http-equiv~ (whichever one specificed)
         - Other attributes are ~charset~ which sets the charset declaration and ~itemprop~ which can add properties to a HTML element

* Summary
  - HTML is HyperText Markup Language, it is a language that has syntax to markup text, thus it can specify which text is bold, which text is a header, etc
  - HTML consists of various elements including: paragraph element, heading element, head element, root element, body element, meta element, list element, anchor element, image element, and more
  - Each HTML element has a boilerplate or a skeleton that every HTML document should have; the version of html is declared using ~DOCTYPE~
  - Then the root element is the first HTML element; the root element can only have one head and one body
  - The head element is an element that is used for metadata and information inside the head element will not be rendered by the browser
  - Metadata information can be provided by the meta element which has various attribute pair values to specify info about the web page
  - The title element specifies the title of the web page
  - The body element is what the browser renders so everything that will be displayed in the browser will be in the body element
  - This includes the heading which has six levels of heading sections; the rules (suggestions) are there should only be one h1 in the webpage and do not skip headings
  - The paragraph element can also be used inside the body and it is used to group content such as text, images, or form elements
  - Inisde the body there can also be ordered or unordered lists and nested lists as well
  - Anchor element is used to create hyperlinks and the image element is used to embed an image in the webpage
  - Finally, you can create comments in the HTML document which is ignored by the browser and is only used for the developer's case
