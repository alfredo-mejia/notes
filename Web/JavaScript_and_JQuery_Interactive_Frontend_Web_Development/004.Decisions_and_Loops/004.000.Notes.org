#+title: Chapter 4: Decisions & Loops
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/bulma@1.0.4/css/bulma.min.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%} .content ul:not(:first-child) {margin-top: 0.25em}}</style>

* Navigation
| Nav   | Title                                                       | Links                                   |
|-------+-------------------------------------------------------------+-----------------------------------------|
| Index | Notes Home                                                  | \vert [[file:../../../index.html][html]] \vert [[file:../../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | JavaScript & JQuery - Interactive Front-end Web Development | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/JavaScript_and_JQuery_Interactive_Frontend_Web_Development][github]] \vert |
| Prev  | Chapter 3: Functions, Methods & Objects                     | \vert [[file:../003.Functions_Methods_and_Objects/003.000.Notes.html][html]] \vert [[file:../003.Functions_Methods_and_Objects/003.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/JavaScript_and_JQuery_Interactive_Frontend_Web_Development/003.Functions_Methods_and_Objects][github]] \vert |
| Next  | Chapter 5: Document Object Model                            | \vert [[file:../005.Document_Object_Model/005.000.Notes.html][html]] \vert [[file:../005.Document_Object_Model/005.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/Web/JavaScript_and_JQuery_Interactive_Frontend_Web_Development/005.Document_Object_Model][github]] \vert |


* Notes
** Section 4.1: Decision Making
   - Code can take different paths depending on the condition set
   - Each path is made up of a different set of tasks which means you have to write different code for each situation
   - To set a condition you can use the comparison operators
   - Some examples of the comparison operators are: greater than (~>~), less than (~<~), double equal sign (~==~), and more
   - There are two components to a decision:
     1. An expression is evaluated which returns a value
     2. A conditional statement says what to do in a given situation
   - How does this work? The expression given is usually comparing two values using a comparison operator which returns a value of true or false
   - Now the conditional statements are the ~if/else~ statements, so if a condition is met then it executes a block of code, otherwise it will execute the other block of code
   - You can combine comparison operators to have multiple conditions inside a conditional statement

** Section 4.2: Comparison Operators - Evaluating Conditions
   - Evaluations using comparison operators will always result in a true or false
   - Here are the following comparison operators:
   | Operator                        | Definition                                                                                         | Example                       |
   |---------------------------------+----------------------------------------------------------------------------------------------------+-------------------------------|
   | ~==~ (Is Equal To)              | This operator compares two values (numbers, strings, or booleans) to see if they are the same      | ~"Hello" == "Bye"~ => false   |
   |                                 |                                                                                                    | ~"Hello" == "Hello"~ => true  |
   |                                 |                                                                                                    | ~"3" == 3~ => true            |
   | ~===~ (Strict Equal To)         | This operator compares two values to check that both the data type and value are the same          | ~"3" === 3~ => false          |
   |                                 |                                                                                                    | ~"3" === "3"~ => true         |
   | ~!=~ (Is Not Equal To)          | This operator compares two values (numbers, strings, or booleans) to see if they are not the same  | ~"Hello" != "Bye"~ => true    |
   |                                 |                                                                                                    | ~"Hello" != "Hello"~ => false |
   |                                 |                                                                                                    | ~"3" != 3~ => false           |
   | ~!==~ (Strict Not Equal To)     | This operator compares two values to check that both the data type and value are not the same      | ~"3" !== 3~ => true           |
   |                                 |                                                                                                    | ~"3" !== "3"~ => false        |
   | ~>~ (Greater Than)              | This operator checks if the number on the left is greater than the number on the right             | ~4 > 3~ => true               |
   |                                 |                                                                                                    | ~3 > 4~ => false              |
   | ~>=~ (Greater Than or Equal To) | This operator checks if the number on the left is greater than or equal to the number on the right | ~4 >= 4~ => true              |
   |                                 |                                                                                                    | ~3 >= 4~ => false             |
   |                                 |                                                                                                    | ~3 >= "3"~ => true            |
   | ~<~ (Less Than)                 | This operator checks if the number on the left is less than the number on the right                | ~4 < 3~ => false              |
   |                                 |                                                                                                    | ~3 < 4~ => true               |
   | ~<=~ (Less Than or Equal To)    | This operator checks if the number on the left is less than or equal to the number on the right    | ~4 <= 3~ => false             |
   |                                 |                                                                                                    | ~3 <= 4~ => true              |
   |                                 |                                                                                                    | ~3 <= 3~ => true              |

   - These comparison operators require two operands and each operand is placed on each side of the operator
   - The operands can be values, variables, or other expressions that evaluate to a single value
   - Recall using a comparison operator with operands is an expression itself because it resolves into a single value: true or false
   - Thus, you can have a conditional expression that is made up of mathematical expressions, string expressions, or even other conditional expressions
   - How can conditional expressions be operands to another conditional expression?
   - Well think of ~true~ as a 1 and ~false~ as a 0, thus if you were to evaluate the condition ~true > false~ then this will evaluate to true because true is made to be a 1 and false is made to be a 0, so it is true that one is greater than 0
   - Example of conditional expression as operands to a conditional expression: ~(3 >= "3") > (3 <= 4)~ => this evaulates to ~true > true~ which in turn evaluates to false because 1 is not greater than 1
   - Example of mathematical expression as operands to a conditional expression: ~(3 + 5) > (1 + 2)~ => this evaulates to ~8 > 3~ which is true
   - These comparison expressions can be joined and combined with other comparison or boolean expressions by using the logical operators

** Section 4.3: Logical Operators
   - Comparison operators usually return single values of ~true~ or ~false~
   - Logical operators allow you to compare the results of more than one comparison operator
   - Here are the logical operators
   | Operator                | # of Operands | Defintion                                                                                      | Example                                                                                                            |
   |-------------------------+---------------+------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------|
   | ~&&~ (Logical And)      |             2 | This operator evaluate to true, only if *BOTH* operands evaluate to true, otherwise false      | ~(2 < 5) && (3 > 4)~ => false because the right operand evaluates to false                                         |
   | \vert\vert (Logical OR) |             2 | This operator evaluate to true, only if at least one operand evaluate to true, otherwise false | (2 < 5) \vert\vert (3 > 4) => true because the left operand is true                                                |
   | ~!~ (Logical Not)       |             1 | This operator takes a single boolean value and inverts it                                      | ~!(2 < 1)~ => true because ~(2 < 1)~ evaluates to false but then the logical not inverts the value and we get true |
   - The logical AND and logical OR both take two operands, these are binary operators while the logical NOT is a uniary operator and only needs one operand
   -

** Section 4.4: Short-Circuit Evaluation
   - Logical expressions are evaluated left to right
   - If the first condition can provide enough information to get the answer, then there is no need to evaluate the second condition
   - For example, for logical AND we need both operands to evaluate to true for the expression to be true otherwise it is false, so if we have ~false && anything~ this automatically tells us this will evaluate to false because once one operand is false it is not possible to have both operands to be true
   - For logical OR there must be at least one operand to evaluate to true for the expression to be true otherwise it is false, so if we have ~true || anything~ then there is no need to check the second condition because this will automatically be true because it met the requirement for at least one operand to be true
   - One thing to note about short-circuit evaulation is that it will return the value that stopped the processing even if the value is not a real boolean value such as true or false
   - The value may be a number or string depending on how JS treats it (either true or false)
   - For example:

   #+BEGIN_SRC JavaScript
     var artist1 = "Artist";
     var artist2 = (artist1 || "Unknown")
   #+END_SRC

   - In the example above, ~artist1~ is a string with a value so JS will treat it as true and no longer needs to check the other condition, thus it returns the value that stopped the processing (~artist1~)
   - Thus short-circuit evaluation will return "Artist" the string obtained from the variable ~artist1~ and not a boolean value because the variable was not a boolean but a string
   - Programmers use this creatively to set values for variables or even create objects
   - Programmers often put the code most likely to return true first in OR operations and false answers first in AND operations
   - Place the options requiring the most processing power last, just in case short-circuit evaluation determines an answer before

** Section 4.5: If-Statements & If-Else Statements
   - The ~if~ statement evaluates (or checks) a condition and if the condition evaluates to true then any statements in the subsequent code block are executed
   - If the condition evaluates to false then the subsequent code block is not executed and is skipped and continues to run whatever is after the ~if~ statement
   - Example:

   #+BEGIN_SRC JavaScript
     if (score >= 50) {
       congratulate();
     }
   #+END_SRC

   - The ~if-else~ statements is similar to the ~if~ statements, a condition is evaluated and if it resolves to true then the first code block is executed inside the ~if~
   - If the condition resolves to false then the second code block is run instead inside the ~else~ statement
   - Example:

   #+BEGIN_SRC JavaScript
     if (scopre >= 50) {
       congratulate();
     }

     else {
       encourage();
     }
   #+END_SRC

** Section 4.6: Switch Statements
   - A switch statement starts with a variable called the switch value
   - Each case indicates a possible value for this variable (switch value) and the code that should if the variable matches that value
   - Example:

   #+BEGIN_SRC JavaScript
     switch (level) {
       case "One":
         title = "Level 1";
         break;
       case "Two":
         title = "Level 2";
         break;
       case "Three":
         title = "Level 3";
         break;
       default:
         title = "Test";
         break;
     }
   #+END_SRC

   - In the example above, the variable named ~level~ is the switch value (the switch value can also be an expression, not just a variable)
   - If the value of the ~level~ variable matches with string "One", "Two", or "Three" it will execute the corresponding code below the case
   - If none of these match the variable then the code after the default will be executed
   - The ~break~ keyword tells the interpreter that it has finished with the ~switch~ statement, thus without it will continue to execute code until it finds a break keyword or the switch statement ends
   - This is why after each case statement we add a ~break~ so that option will not begin executing code from a different case option
   - Although similar to ~if-else~ statements and ultimately can achieve the same results as ~if-else~ statements, the switch statement has its use cases and is more suitable for certain situations than if-else statements (please see the questions section in this notes)

** Section 4.7: Type Coercion & Weak Typing
   - If you use a data type JavaScript did not expect then it tries to make sense of the operation rather than report an error
   - JS can convert data types behind the scenes to complete an operation, this is known as type coercion
   - For example, the string '1' can be converted to a number 1 in the following expression: ~('1' > 0)~
   - Type coercion can lead to unexpected values, bugs, or errors in your code and is often recommended to use strict equals operators such as ~===~ or ~!==~ than ~==~ and ~!=~ as strict operators check that the value and data types match
   - Due to type coercion, every value in JS can be treated as if it were true or false
   - Falsy values are treated as if they are false and this includes the boolean value false, the number 0, empty string, NaN (not a number), and a variable with no value assigned to it
   - Truthy values are treated as if they are true and this includes almost everything else besides the falsy values which are the boolean value true, numbers other than zero, strings with content, number calculations, objects, arrays, etc.
   - Objects and arrays are evaulated to true and can be useful when checking if an object exists and it is not pointing to null
   - Because the presence of an object or array can be considered truthy it is often used to check for the existence of an element within a page
   - When comparing falsy values and not using the strict equality operators then the boolean value false, zero, and an empty string are equivalent but when using the strict equality operators they are not equivalent
   - Null and undefined are both falsy and are equivalent only to themselves when not using the strict equality operators but when using the strict equality operators they are not equivalent
   - NaN is not equivalent to anything even if you do not use the strict equality operators, not even to itself
   - JS has weak typing because the data type for a variable can change unlike strong typing languages in which they require you to specify what data type each variable will be

** Section 4.8: Loops
   - Loops check a condition, and if it returns true then a code block will run, then the condition will be checked again and if it still returns true the code block will run again, it repeats until the condition returns false
   - There are 3 common types of loops:
     - For Loops: In a for loop, the condition is usually a counter which is used to tell how many times the loop should run so if you need to run code a specific number of times, use a for loop
     - While Loops: The condition in a while loop can be other than a counter and the code will continue to loop for as long as the condition is true so if you do not know how many times the code should run you can use a while loop
     - Do-While Loops: The do-while loop is similar to a while loop except the code block of the loop will run at least once (at the minimum) even if the condition evaluates to false

   - Example of for-loop:

   #+BEGIN_SRC JavaScript
     for(var i = 0; i < 10; i++) {
       document.write(i);
     }
   #+END_SRC

   - A for loop uses a counter as a condition and this instructs the code to run a specified number of times
   - The for-loop condition is made up of three statements:
     1. Initialization: Create a variable (or use an existing variable), initialize the variable, it is often called i, and this variable acts as the counter; this variable is only created the first time the loop is run
     2. Condition: The loop should continue to run until the counter reaches a specified number (e.g. ~i < 10~), the condition may also use variables to compare with the counter instead of number literals
     3. Update: After every loop it executes the "update" statement, in this case ~i++~ adds one to the counter but the update statement is not limited to adding, it can subtract, multiply, divide, etc
   - So each time the condition is true it executes the code block inside the for-loop
   - The counter variable can be used inside the for-loop

   - Example of while-loop:

   #+BEGIN_SRC JavaScript:
     while (i < 10) {
       document.write(i);
     }
   #+END_SRC

   - The while-loop only has one statement and that is the condition
   - This loop will continue to run for as long as the condition in the parentheses is true

   - Example of do-while-loop:

   #+BEGIN_SRC JavaScript
     do {
       document.write(i);
     } while (i < 1);
   #+END_SRC

   - Notice that the code block for the loop comes before the while loop in a do-while unlike a regular while-loop
   - This is because the code block is run once regardless of the condition, the code block will run once even if the condition is false
   - After the first loop then that is when the condition is checked, if true it will continue to loop again, if false it will stop but the loop as executed at least once

*** Section 4.8.1: Key Loop Concepts
    - Keyword ~break~ causes the termination of the loop and tells the interpreter to go onto the next statement of code *outside* of the loop; in other words, it terminates the loop and continues with the code path
    - Keyword ~continue~ tells the interpreter to stop the current iteration, it will stop the current loop, execute the update statement, check the condition, and if true continue with the loop
    - Loops are very helpful when dealing with arrays if you want to run the same code for each item in the array
    - You may not known how many items will be in array when writing a script but when the code runs it can check the total number of items in a loop and run a set of statements for each array item
    - Recall, when a browser comes across JS it will stop doing anything else until it has processed that script so if you have a loop that loops many times it can make the page slower to load
    - Be careful with infinite loops where the condition never returns false which will cause the browser to run out of memory and break your script
    - Any variable you can define outside of the loop and that does not change within the loop should be defined outside of it because if you declare it inside the loop then it would be recalculated every time the loop ran thus using needlessly resources which we want to avoid

** Section 4.9: Chapter Exercise
   - We are going to build a times-table, similar to the times-table they give elementary students so they can learn their multiplications
   - The user will be able specify how many columns and rows they would like and the table will be generated for them
   - [[file:./004.009.Chapter_Exercise/index.html][Here is my times-table generator]]

** Section 4.10: Chapter Summary
   - Conditional statements allow your code to make decisions about what to do next
   - Comparison operators are used to compare two operands
   - Logical operators allow you to combine more than one set of comparison operators
   - ~if-else~ statements allow you to run one set of code if a condition is true and another if it is false
   - ~switch~ statements allow you to compare a value against possible outcomes and provide a default option if none match
   - Data types can be coerced from one type to another
   - All values evaluate to either truthy or falsy
   - There are three types of loops: for, while, and do-while loops
   
* Keywords
| Term                     | Definition                                                                                                                                                                                                                                                                                                                                                                              |
|--------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Comparison Operators     | Comparison operators are binary operators that compare two operands and evaluate to either true or false, the operators are the following: ~>~, ~<~, ~==~, ~!=~, ~>=~, ~<=~, ~===~, and ~!==~                                                                                                                                                                                           |
| Logical Operators        | Logical operators combine or modify boolean values, the operators are either binary or unary, the operators are the following: ~&&~ (AND), OR, ~!~ (NOT)                                                                                                                                                                                                                                |
| Condition                | A condition is a logical (conditional) expression that evaluates to either true or false (no other value)                                                                                                                                                                                                                                                                               |
| Short-Circuit Evaluation | Short-circuit evaluation is a behavior in JS (and many other languages) that in a binary logical operation (using logical operators), if the first operand provides enough info to evaluate the logical expression then it will not check the second operand, in other words, the second operand will only be checked if the first operand is not sufficient to determine true or false |
| Type Coercion            | Type coercion is when JS automatically or implicitly converts a value from one data type to another during an operation because it expects the value to be a certain type, for example if you do ~5 == "5"~ then it will convert (coerced) the string 5 into the number 5                                                                                                               |
| Weak Typing              | Weak typing is a characteristic of a programming language like JS where the variable does not need to declare its type and the type of the variable can change during runtime                                                                                                                                                                                                           |

* Questions
  - *Q*: What is the difference between the comparison operators ~==~ and ~===~?
         - The difference between equality and "strict" equality is whether or not they perform type coercion before comparing the values
	 - Recall type coercion is when JS converts a data type to another data type that it expects
	 - For example ~5 == "5"~ then the string 5 will be converted to the number 5
	 - Type coercion (converting data types) happens with ~==~ before it compares the values
	 - With strict equality (~===~) the operator does not attempt to convert any operands and no type coercion is performed
	 - Thus the difference is that ~==~ performs type coercion while ~===~ does not perform type coercion
	 - ~5 == "5"~ evalues to true because the string is converted to a number and both are the same number
	 - ~5 === "5"~ evalues to false because they are different data types and thus different values
	   
  - *Q*: Is there a strict greater than or equal to operator?
         - No there is not a strict greater than or equal to
	 - The only strict comparison operators are the strict equality operator and the strict inequality operator
	 - All other operators perform type coercion
	 - When comparing operands and you want to perform a strict greater than or any other unsupported strict operation then you will need create a custom function that compares the data types of each operand and the value
	   
  - *Q*: When to use ~switch~ statements compared to ~if-else~ statements?
         - If-else statements are good when the conditions are complexed, there are multiple logical and comparison operators, when you need to check a range, and when checking data types
	 - Switch statements are good when comparing discrete values or fixed values for equality like strings and single digits, and these values need to be checked by the equality
	 - For example, if you have a string called apple and you want to compare with other strings then instead of if-statements then use a switch because the strings are fixed values
	   
* Summary
  - In code it is good to be able to make decisions based on certain conditions
  - A condition is a logical expression that evaluates to either true or false
  - You can use comparison operators to create a logical expression
  - Comparison operators are binary operators that compare two operands and evaluate to true or false
  - You can also use logical operators to combine other logical expressions
  - Logical operators may be binary or unary operators that evaluate to true or false
  - Logical operators can be used with other logical expressions that may be using comparison operators or other logical operators
  - The operands of the comparison operators may be a variable, literal, or any other conditional expression
  - The operands of the logical operators can also be any expression because JS treats certain data types as truthy or falsy values
  - For example, truthy values include the boolean value true, numbers other than zero, strings with content, number calculations, objects, and arrays
  - Falsy values include the boolean value false, the number 0, empty string, NaN (not a number), and a variable with no value assigned to it
  - When comparing falsy values using the loose equality, the boolean false value, zero, and empty string are equivalent
  - Null and undefined are equivalent when using the loose equality but NaN is not equivalent to anything not even itself
  - When using comparison operators except the strict equality and strict inequality they all perform something called type coercion
  - Type coercion converts a data type into another data type that JS is expecting
  - For example if you compare a string with a number then JS will convert the string into a number to be able to perform the comparison operation
  - This is why we can compare some falsy values like null and undefined because of type coercion
  - However when you use strict equality or strict inequality type coercion is not performed
  - When dealing with logical operators, JS performs short-circuit evaluation which states that if the first operand of a binary logical operation provides enough information to determine the value of the expression then there is no need to take a look at the second operand
  - To make decisions in code you can use if, if-else, and switch statements
  - To repeat a set of statements you can use either a for-loop, while-loop, or do-while-loop which will repeat a set of statements depending on a condition
  - For loops are good whenever you need a counter and that counter is used in the condition
  - While loops are good when you do not have a counter but just have a condition
  - Do-while are similar to while except this will always run the set of statements once before checking the condition even if the condition evaluates to false
  - Finally JS is weak typing meaning variables do not need to declare their data type and their data type can change during runtime
