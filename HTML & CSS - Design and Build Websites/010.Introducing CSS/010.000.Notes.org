#+title: Ch.10 Introducing CSS
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../../scratch/bulma/bulma.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%}</style>

* Navigation
*Home*: HTML & CSS - Design and Build Websites [[[file:../000.Home.html][html]]] [[[file:../000.Home.org][org]]] [[[https://github.com/alfredo-mejia/notes/tree/main/HTML%20%26%20CSS%20-%20Design%20and%20Build%20Websites][github]]]

*Prev*: Ch.9 Flash, Video & Audio [[[file:../009.Flash, Video & Audio/009.000.Notes.html][html]]] [[[file:../009.Flash, Video & Audio/009.000.Notes.org][org]]] [[[https://github.com/alfredo-mejia/notes/tree/main/HTML%20%26%20CSS%20-%20Design%20and%20Build%20Websites/009.Flash%2C%20Video%20%26%20Audio][github]]]

*Next*: Ch.11 Color [[[file:../011.Color/011.000.Notes.html][html]]] [[[file:../011.Color/011.000.Notes.org][org]]] [[[https://github.com/alfredo-mejia/notes/tree/main/HTML%20%26%20CSS%20-%20Design%20and%20Build%20Websites/011.Color][github]]]

* Notes

** Section 10.1: Introduction to CSS
   - THe key to understanding how CSS works is to imagine that there is an invisible box around every HTML element
   - Recall what are block level elements and inline level elements: block level elements start on a new line while inline elements flow within the text and do not start on a new line
   - CSS allows you to create rules that control the way that each individual box and the contets of that box is presented
   - For example, for elements or "boxes" you can add a border around any of the boxes and specify the width, height, color, style, background color, and more
   - For text inside a box you can control the typeface (e.g. font which is a specific style of the typeface like Roboto which is the typeface and the font is Roboto Regular or Roboto Thin), size, color, italics, bold, uppercase, lowercase, and more
   - However there are specific rules in CSS to specifically specify the ways you want to style certain elements

*** Section 10.1.1: CSS Rules
    - CSS works by associating rules with HTML elements
    - What do we mean by that? These rules govern how the content of specified elements should be displayed
    - A CSS rule contains two parts: a *selector* and a *declaration*
    - For example:

    #+BEGIN_SRC css
      p {
	  font-family: Arial;
      }
    #+END_SRC

    - The p is the selector and indicates that all ~<p>~ elements should be shown in the Arial typeface
    - The declaration is the ~font-family: Arial~
    - Selectors indicate which element the rule applies to and the same rule can apply to more than one element if you separate the elemet names with commas like ~p, h1, div {}~ (the declaraction will be applied to ~<p>~, ~<h1>~, and ~<div>~ elements)
    - Declarations indicate how the elements referred to in the selector should be styled

*** Section 10.1.2: CSS Declaration Rules
    - Declarations are split into two parts: a property and a value
    - The property and value are separated by a colon and it ends with a semi-colon
    - CSS declarations sit inside curly brackets after specifying the selectors
    - Several /properties/ can be specified in one declaration by separating the property / value pair by a semi-color
    - Properties indicate the aspects of the element you want to change (e.g. color, font, width, etc.)
    - Values specify the settings you want to use for the chosen properties (e.g. green for color, Roboto for typeface, etc.)
    - For example:

    #+BEGIN_SRC css
      h1, h2, h3 {
	  font-family: Arial;
	  color: yellow;
      }
    #+END_SRC

    - The example above says for h1, h2, and h3 elements I want the typeface to be Arial and the text color to be yellow
    - Let's do an [[file:./010.001.First CSS Example/index.html][exmaple with HTML and CSS]]

** Section 10.2: Using CSS

*** Section 10.2.1: Using External CSS
   - The ~<link>~ element can be used in a HTML document to tell the browser where to find the CSS file to style the page
   - The ~<link>~ element is a self-closing tag and it is inside the ~<head>~ element and it should use three attributes:
     1. ~href~: specifies the path to the CSS file (often placed in a folder called css or styles)
     2. ~type~: specifies the type of document being linked to (e.g. ~text/css~)
     3. ~ref~: specifies the relationship between the HTML page and the file it is linked to (e.g. ~stylesheet~)
   - An HTML page can use more than one CSS style sheet
   - To do this it could have a ~<link>~ element for every CSS file it uses (e.g. one CSS file to control presentation and a second to control the layout)
   - Here is an example:

     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
	 <head>
	   <title>An Example Using External CSS</title>
	   <link href="css/styles.css" type="text/css" rel="stylesheet" />
	 </head>
       </html>
     #+END_SRC
     
*** Section 10.2.2: Using Internal CSS
   - You can use the ~<style>~ element which sits inside the ~<head>~ element which allows you to include CSS rules within an HTML page by placing them inside the ~<style>~ element
   - The ~<style>~ element should use the ~type~ attribute to indicate that the styles are specified in CSS (e.g. ~text/css~ specifies the style is in CSS)
   - Although you can use internal CSS with HTML, it is best to use an external CSS style sheet especially when building a site with more than one page
   - The benefits of using external CSS style sheet are:
     - Same style sheet can be applied to multiple pages instead of repeating them
     - Keeps the content separate from how the page looks
     - Can change the style of all pages by modifying only one file
   - Here is an example:
     
     #+BEGIN_SRC html
       <!DOCTYPE html>
       <html>
	 <head>
	   <title>An Example Using Internal CSS</title>
	   <style type="text/css">
	     body {
	       font-family: arial;
	     }
	   </style>
	 </head>
       </html>
     #+END_SRC

*** Section 10.2.3: Using Inline CSS
    - Another way to specify CSS are by the ~style~ attribute which is avaiable in most of the elements that appear in the body of a page
    - The CSS rules that appeared within the value of the attribute would only apply to that one element
    - Here's an example:

      #+BEGIN_SRC html
	<p style="color:red;">This is an example</p>
      #+END_SRC

** Section 10.3: CSS Selectors
   - Recall a CSS rule has one or more selectors and a declaration
   - The declaration can have one or more properties which specify some CSS property to a HTML element?
   - What are CSS selectors? CSS selectors are a pattern of elements and other terms to basically tell the browser which HTML elements should be selected to have the CSS property values declared in the declaration of the CSS rule
   - There are many different types of CSS selectors that allow you to target rules to specific elements in a HTML document
   - CSS selectors are case sensitive so they must match element names and attribute values exactly (e.g. class names, ids, any other attribute because it can be used to select a HTML element)
   - There are advanced selectors which allow you to select elements based on attributes and their values
   - Here are the list of selectors:

   | Selector                         | Meaning                                                                                                                                                                               | Example                                                                                   | Explanation|
   ||
   | Universal Selector               | Applies to all elements in the document                                                                                                                                               | ~* {}~                                                                                    | Notice how the "*" indicates all the properties declared in the declaration will be applied to every HTML element declared in the page                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
   | Type Selector                    | Applies to HTML elements with the same name                                                                                                                                           | ~h1, h2, h3 {}~                                                                           | Notice how it will use the names and match it with the HTML elements' names; multiple html elements can be specified all having the same declaration declared instead of repeating the same declaration                                                                                                                                                                                                                                                                                                                                                                                                                          |
   | Class Selector                   | Matches an element whose ~class~ attribute has a value that matches the one specified after the period symbol                                                                         | ~.note {}~ or ~p.note {}~                                                                 | Notice to use a class selector you must use a period which will apply to HTML elements with that class or you can target HTML elements with that class attribute but the HTML element must be a specific element for the properties to be applied (e.g. ~p.note~ specifies only ~<p>~ elements whose ~class~ attribute has a value of ~note~)                                                                                                                                                                                                                                                                                    |
   | ID Selector                      | Matches an element whose ~id~ attribute has a value that matches the one specified after the pound or hash symbol                                                                     | ~#introduction {}~                                                                        | Notice to use a id selector you must use the pound symbol and targets a specific HTML element with the same id attribute                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         |
   | Attribute Selector               | Matches HTML elements with certain attributes                                                                                                                                         | ~a[title]~ or ~a[href="example.com"]~ or ~p[class~="special"]~ or ~div[lang \vert ="zh"]~ | Notice the first example will apply the properties to the ~<a>~ elements that have an attribute called ~title~, the second example will apply to ~<a>~ elements that have the attribute ~href~ and the exact value ~example.com~, the third example matches ~<p>~ elements whose attribute ~class~ has an exact value or contains the value in a space separated list of ~special~, and the fourth example matches with ~<div>~ elements with the attribute ~lang~ whose value is exactly or begins with ~zh~ immediately followed by a hyphen; these are just examples but many combinations can be created using this selector |
   | Pseudo Class & Elements          | Matches with certain states of an element (pseudo class) or a certain part of the element rather than an element itself (pseudo element)                                              | ~a:hover {}~ or ~p::first-line {}~                                                        | The properties will be applied to only ~<a>~ elements when the element is hovered over by a mouse pointer and the second example indicates the first line inside the ~<p>~ element will have the properties applied; these are just examples and there are various pseudo classes and elements                                                                                                                                                                                                                                                                                                                                   |
   | Child Selector                   | Matches an element that is a direct child of another                                                                                                                                  | ~li > a {}~                                                                               | Notice the ">" symbol used indicate the parent and child; In the example, it will target any ~<a>~ elements that are direct children of an ~<li>~ element (but not other ~<a>~ elements in the page)                                                                                                                                                                                                                                                                                                                                                                                                                             |
   | Descendant Selector              | Matches an element that is a descendent of another specified element (includes but not just a direct child of that element)                                                           | ~p a {}~                                                                                  | Notice how a space is used to describe the relationship; it targets any ~<a>~ elements that sit inside a ~<p>~ element, even if there are other elements nested between them (does not matter the number of elements in between)                                                                                                                                                                                                                                                                                                                                                                                                 |
   | Next (Adjacent) Sibling Selector | Matches an element that is the next sibling of another                                                                                                                                | ~h1 + p {}~                                                                               | The "+" is used to describe the relationship; In the example, it will target the *first* (hence next) ~<p>~ element after any ~<h1>~ elements (but not any other ~<p>~ elements)                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
   | Subsquent Sibling Selector       | Matches an element that is a sibling of another, although it does not have to be the directly adjacent element; basically matches any sibling of the element that come anywhere after | ~h1 ~ p {}~                                                                               | The "\~" is used to describe the relationship and in the example if you had two ~<p>~ elements that are siblings of an ~<h1>~ element then this rule would apply to both                                                                                                                                                                                                                                                                                                                                                                                                                                                         |

   - [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors][Mozilla CSS Selectors Docs]]
   - [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Type_Class_and_ID_Selectors][Mozilla Type, Class, and ID Selectors Docs]]
   - [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Attribute_selectors][Mozilla Attribute Selectors Docs]]
   - [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Pseudo-classes_and_pseudo-elements][Mozilla Pseudo-Classes and Pseudo-Elements Docs]]
   - [[https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Selectors/Combinators][Mozilla Combinators Selectors Docs]]

   - There are many more ways to combine selectors in CSS, the ones discussed above are just examples
   - For example, you may use an attribute selector along with a child selector

** Section 10.4: How CSS Rules Cascade
   - What if there are two or more rules that apply to the same element? There are a couple precendence rules to dictate the CSS rules precedence
   1. Last Rule
      - If there are two selectors that are identical (e.g. ~p {}~ and ~p {}~ appear twice) then the latter of the two will take precedence
   2. Specificity
      - If one selector is more specific than the others, the more specific rule will take precedence over more general ones
      - How is specifcity determined? According to the [[https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity#selector_weight_categories][Mozilla Specificity Docs]] the specificity of the CSS rule is determined by an algorithm depending on the selectors weight category (e.g. id selectors have the highest weight)
      - An example is that ~h1~ is more specific than ~*~ and ~p b~ is more specific than ~p~ and ~p#intro~ is more specific than ~p~
      - Note that inline CSS have the highest preccedence
      - However, you can add ~!important~ after any property value to indicate that it should be considered more important than other rules that apply to the same element (thus overriding any other rule applied to the element including inline CSS)
      - An example of using ~!important~ is the following: ~p {color: blue !important;}~
   - Benefit of understanding cascading rules is that you can create generic rules that apply to most elements and then override the properties on individual elements that need to appear differently

** Section 10.5: Inheritance
   - There are some CSS properties that when applied to the element then all descendants of that element will inherit the same property
   - For example, if you specify the ~font-family~ or the ~color~ properties on the ~<body>~ element then they will be applied to most child elements
   - THis is because those properties are inherited by the child elements
   - There are other properties that are not inherited by child elements (e.g. ~background-color~, ~border~, ~width~, etc.)
   - However, you can force a lot of properties to inheirt values from their parent elements by using ~inherit~ for the value of the properties
   - For example:

     #+BEGIN_SRC css
       body {
	   padding: 10px;
       }

       h1 {
	   padding: inherit;
       }
     #+END_SRC

   - In this example, the ~<h1>~ elements will have the padding inherited from the parent
   - Note that ~inherit~ is used in the child elements and not in the parent; thus if you want a selector to inherit certain properties of their parent then use the ~inherit~ for the value of the properties

** Section 10.6: Why Use External Style Sheets
   - The benefits of using external style sheets are:
     1. All web pages can share common style sheets by using the ~<link>~ element on the pages
     2. Your website will be faster to download because the files will be smaller because there will be shared files and thus will not be needed to repeat files or code
     3. Changing your whole website can be done quicker and efficient by having only one place to edit
     4. Easier to understand HTML code because CSS rules will be removed
     5. Good practice to have the content of the site separated from the rules that determine how it appears
   - Why use internal CSS?
     1. You are creating a single HTML page and thus want to keep everything in one file (although good practice to separate HTML and CSS)
     2. Want to override some CSS rules only for that specific page (although good practice to separate HTML and CSS)

** Section 10.7: Different Versions of CSS & Browser Quirks
   - CSS1 was released in 1996 followed by CSS2 in 1998 and finally CSS3 is the latest CSS version
   - There may be some quirks or nuances in the way different browsers implement certain CSS properties
   - Best way to find such nuances in your website is to test your site in multiple browsers in multiple OS
   - If something does not display as expected you can either find a solution or change the CSS rule
   - Normally when a CSS property does not display as expected it is generally referred to as a browser quirk or CSS bug
   
* Keywords
| Term | Definition |
|------+------------|
| CSS  |            |

* Questions
  - *Q*: Besides CSS files, can ~<link>~ elements be used for other purposes? Does it need to be inside the ~<head>~ element? Can it be inside other elements? 

* Summary
