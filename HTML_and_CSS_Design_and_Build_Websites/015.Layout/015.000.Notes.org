#+title: Chapter 15: Layout
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../../resources/bulma/bulma.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%}</style>

* Navigation                                                                                                                                                                                                          
| Nav   | Title                                  | Links                                   |
|-------+----------------------------------------+-----------------------------------------|
| Index | Notes Home                             | \vert [[file:../../index.html][html]] \vert [[file:../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | HTML & CSS - Design and Build Websites | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites][github]] \vert |
| Prev  | Chapter 14: Lists, Tables & Forms      | \vert [[file:../014.Lists_Tables_and_forms/014.000.Notes.html][html]] \vert [[file:../014.Lists_Tables_and_Forms/014.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites/014.Lists_Tables_and_Forms][github]] \vert |
| Next  | Chapter 16: Images                     | \vert [[file:../016.Images/016.000.Notes.html][html]] \vert [[file:../016.Images/016.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites/016.Images][github]] \vert |

* Notes

** Section 15.1: Key Concepts in Positioning Elements
   - CSS treats each HTML element as if it is in its own box; this box will either be a block-level box or an inline box
   - Block level boxes start on a new line and act as the main building blocks of any layout
   - Inline level boxes flow between surrounding text
   - You can control how much space each box takes up by setting the width of the boxes (and sometimes the height too)
   - To separate boxes, you can use borders, margins, padding, and background colors
   - If one block-level element sits inside another block-level element then the outer box is known as the containing or parent element
   - It is common to group a number of elements inside a ~<div>~ (or other block-level) element (e.g. you might group together all of the elements that form the header of a site such as the logo and the main navigation)
   - The block element (e.g. ~<nav>~) contining a group of elements is then referred to as the containing element
   - A box may be nested inside several other block-level elements (the containing element is always the direct parent of that element)

** Section 15.2: Controlling the Position of Elements
   - CSS has the following *positioning schemes* that allow you to control the layout of a page: normal flow, relative positioning, and absolute positioning
   - You can specify the positioning scheme using the ~position~ property in CSS and you can float elements using the ~float~ property
   - *Normal Flow*: Every block-level element appears on a new line, causing each item to appear lower down the page than the previous one
   - Even if you change the width of the boxes so they can fit in a single line they will *not* appear next to each other unless you tell the browser to do something different
   - *Relative Positioning*: This moves an element from the position it would be in normal flow, shifting it to the top, right, bottom, or left of where it would have been placed (this does not affect the position of surrounding elements; they stay in the position they would be in normal flow) 
   - *Absolute Positioning*: This positions the element in relation to its containing element as it is taken out of normal flow meaning that it does not affect the position of any surrounding elements as they simply ignore the space it would have taken up
   - Absolutely positioned elements move as users scroll up and down the page
   - *Fixed Positioning*: This is a form of absolute positioning that positions the element in relation to the browser window, as opposed to the containing element
   - Fixed positioned elements do not affect the position of surrounding elements and they do not move when the user scrolls up or down the page
   - *Floating Elements*: Floating an element allows you to take that element out of normal flow and position it to the far left or right of a containing box
   - The floating element becomes a block-level element around which other content can flow
   - To indicate where a box should be positioned, you may also need to use box offset properties to tell the browser how far from the top or bottom and left or right it should be placed
   - When you move any element from normal flow, boxes can overlap and thus the ~z-index~ property allows you to control which box appears on top

** Section 15.3: Normal Flow
   - In normal flow, each block-level element sits on top of the next one (this is the default behavior of HTML)
   - You don't need a CSS property to indicate that the elements should appear in normal flow but the syntax would be ~position: static~
   - Here's an [[file:./015.003.Normal_Flow_Example/index.html][example]]
   - As you can see in the example, the paragraph blocks take up 50% and 25% respectively but they do not sit side by side instead they go onto the next line despite there being space
   - I also wanted to test the ~position: static~ attribute so I created two divs, the top one is without a ~position~ attribute and the bottom one is with the ~position~ attribute and as expected the default behavior is the same as ~position: static~

** Section 15.4: Relative Positioning
   - Relative positioning moves an element in relation to where it would have been in normal flow
   - For example, you can move it 10 pixels lower than it would have been in normal flow or 20% to the right
   - You can indicate that an element should be relatively positioned using the ~position: relative~ property
   - You can then use the offset properties, ~top~, ~bottom~, ~left~, and ~right~ to indicate how far to move the element from where it would have been in normal flow
   - The values of the box offset properties are usually given in pixels, percentages, or ems
   - Here's an [[file:./015.004.Relative_Positioning_Example/index.html][example]]
   - The example shows that relative positioning is all relative to the position of the element when it is in normal flow
   - Thus if you offset the element from its normal flow position and it stays within bounds meaning it looks like it belongs or it doesn't overlap with other elements then great
   - But what if we offset too much, what happens?
   - In the example, I offset two elements relative to their normal flow position
   - The first element I put it to the right and down but I did it so much so that it overlap with other elements
   - This overlapping stays overlapped and does not affect the position of the affected elements
   - The last element I pushed to the right but since there are no elements there it seems like it belongs there but if there were elements there it would also overlap
   - Thus relative positioning moves elements relative to their normal flow position to any place in the web page, it doesn't matter if it is super far, in another div, or there are elements there, the element will move based on its original position and offset
   - Relative positioning may overlap with other elements and stay in that position but will not affect the position of other elements (besides taking space in its original normal flow position)

** Section 15.5: Overlapping Elements
     
* Keywords
| Term                 | Definition                                                                                                                                                                                                                                                                |
|----------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Block-level box      | Boxes that start on a new line and act as the main building blocks of any layout                                                                                                                                                                                          |
| Inline-level box     | Boxes that flow between surrounding text                                                                                                                                                                                                                                  |
| Normal Flow Position | Every block-level element appears on a new line even if there is space in the current line thus causing each item to appear lower down the page than the previous one                                                                                                     |
| Rleative Positioning | This moves an element from the position it would be in normal flow, shifting it to the top, right, bottom, or left of where it would have been placed (this does not affect the position of surrounding elements; they stay in the position they would be in normal flow) |
| Absolute Positioning | This positions the element in relation to its containing element as it is taken out of normal flow meaning that it does not affect the position of any surrounding elements as they simply ignore the space it would have taken up                                        |
| Fixed Positioning    | This is a form of absolute positioning that positions the element in relation to the browser window, as opposed to the containing element                                                                                                                                 |
| Floating Elements    | Floating an element allows you to take that element out of normal flow and position it to the far left or right of a containing box                                                                                                                                       |


* Questions
  - *Q*:
    
* Summary
  - CSS treats each HTML element as if it is in its own box
  - The box is either block-level box (which start on a new line and act as the main building blocks of any layout) or inline-level box (which flow between surrounding text)
  - There may be nested block-level elements and the block-level element that contains the nested block-level elements are referred to as the containing element or direct parent of the nested block elements
