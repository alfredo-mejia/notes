#+title: Chapter 15: Layout
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../../resources/bulma/bulma.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%}</style>

* Navigation                                                                                                                                                                                                          
| Nav   | Title                                  | Links                                   |
|-------+----------------------------------------+-----------------------------------------|
| Index | Notes Home                             | \vert [[file:../../index.html][html]] \vert [[file:../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | HTML & CSS - Design and Build Websites | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites][github]] \vert |
| Prev  | Chapter 14: Lists, Tables & Forms      | \vert [[file:../014.Lists_Tables_and_forms/014.000.Notes.html][html]] \vert [[file:../014.Lists_Tables_and_Forms/014.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites/014.Lists_Tables_and_Forms][github]] \vert |
| Next  | Chapter 16: Images                     | \vert [[file:../016.Images/016.000.Notes.html][html]] \vert [[file:../016.Images/016.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/HTML_and_CSS_Design_and_Build_Websites/016.Images][github]] \vert |

* Notes

** Section 15.1: Key Concepts in Positioning Elements
   - CSS treats each HTML element as if it is in its own box; this box will either be a block-level box or an inline box
   - Block level boxes start on a new line and act as the main building blocks of any layout
   - Inline level boxes flow between surrounding text
   - You can control how much space each box takes up by setting the width of the boxes (and sometimes the height too)
   - To separate boxes, you can use borders, margins, padding, and background colors
   - If one block-level element sits inside another block-level element then the outer box is known as the containing or parent element
   - It is common to group a number of elements inside a ~<div>~ (or other block-level) element (e.g. you might group together all of the elements that form the header of a site such as the logo and the main navigation)
   - The block element (e.g. ~<nav>~) contining a group of elements is then referred to as the containing element
   - A box may be nested inside several other block-level elements (the containing element is always the direct parent of that element)

** Section 15.2: Controlling the Position of Elements
   - CSS has the following *positioning schemes* that allow you to control the layout of a page: normal flow, relative positioning, and absolute positioning
   - You can specify the positioning scheme using the ~position~ property in CSS and you can float elements using the ~float~ property
   - *Normal Flow*: Every block-level element appears on a new line, causing each item to appear lower down the page than the previous one
   - Even if you change the width of the boxes so they can fit in a single line they will *not* appear next to each other unless you tell the browser to do something different
   - *Relative Positioning*: This moves an element from the position it would be in normal flow, shifting it to the top, right, bottom, or left of where it would have been placed (this does not affect the position of surrounding elements; they stay in the position they would be in normal flow) 
   - *Absolute Positioning*: This positions the element in relation to its containing element as it is taken out of normal flow meaning that it does not affect the position of any surrounding elements as they simply ignore the space it would have taken up
   - Absolutely positioned elements move as users scroll up and down the page (that means when you scroll the elements rise up or rise down, the elements will move out of the screen if you scroll too far up or down)
   - *Fixed Positioning*: This is a form of absolute positioning that positions the element in relation to the browser window, as opposed to the containing element
   - Fixed positioned elements do not affect the position of surrounding elements and they do not move when the user scrolls up or down the page (meaning if you scroll up or down the elements will stay where they are always in site of the browser window)
   - *Floating Elements*: Floating an element allows you to take that element out of normal flow and position it to the far left or right of a containing box
   - The floating element becomes a block-level element around which other content can flow
   - To indicate where a box should be positioned, you may also need to use box offset properties to tell the browser how far from the top or bottom and left or right it should be placed
   - When you move any element from normal flow, boxes can overlap and thus the ~z-index~ property allows you to control which box appears on top

** Section 15.3: Normal Flow
   - In normal flow, each block-level element sits on top of the next one (this is the default behavior of HTML)
   - You don't need a CSS property to indicate that the elements should appear in normal flow but the syntax would be ~position: static~
   - Here's an [[file:./015.003.Normal_Flow_Example/index.html][example]]
   - As you can see in the example, the paragraph blocks take up 50% and 25% respectively but they do not sit side by side instead they go onto the next line despite there being space
   - I also wanted to test the ~position: static~ attribute so I created two divs, the top one is without a ~position~ attribute and the bottom one is with the ~position~ attribute and as expected the default behavior is the same as ~position: static~

** Section 15.4: Relative Positioning
   - Relative positioning moves an element in relation to where it would have been in normal flow
   - For example, you can move it 10 pixels lower than it would have been in normal flow or 20% to the right
   - You can indicate that an element should be relatively positioned using the ~position: relative~ property
   - You can then use the offset properties, ~top~, ~bottom~, ~left~, and ~right~ to indicate how far to move the element from where it would have been in normal flow
   - The values of the box offset properties are usually given in pixels, percentages, or ems
   - Here's an [[file:./015.004.Relative_Positioning_Example/index.html][example]]
   - The example shows that relative positioning is all relative to the position of the element when it is in normal flow
   - Thus if you offset the element from its normal flow position and it stays within bounds meaning it looks like it belongs or it doesn't overlap with other elements then great
   - But what if we offset too much, what happens?
   - In the example, I offset two elements relative to their normal flow position
   - The first element I put it to the right and down but I did it so much so that it overlap with other elements
   - This overlapping stays overlapped and does not affect the position of the affected elements
   - The last element I pushed to the right but since there are no elements there it seems like it belongs there but if there were elements there it would also overlap
   - Thus relative positioning moves elements relative to their normal flow position to any place in the web page, it doesn't matter if it is super far, in another div, or there are elements there, the element will move based on its original position and offset
   - Relative positioning may overlap with other elements and stay in that position but will not affect the position of other elements (besides taking space in its original normal flow position)

** Section 15.5: Absolute Positioning
   - In order to understand more about ~position~ and ~absolute~ positioning, I visited these 3 websites:
     - [[https://developer.mozilla.org/en-US/docs/Web/CSS/position][Mozilla Docs - CSS Position]]
     - [[https://stackoverflow.com/questions/45784777/what-is-a-positioned-ancestor#:~:text=When%20referring%20to%20positioned%20ancestor,ancestors%20we%20mean%20the%20closest.][Stackoverflow - What is a Positioned Ancestor]]
     - [[https://css-irl.info/finding-an-elements-nearest-relative-positioned-ancestor/][Finding an Element's Nearest Relative Positioned Ancestor]]
    
   - When the ~position~ property is given a value of ~absolute~ the box is taken out of normal flow and no longer affects the position of other elements on the page (they act like it is not there)
   - What do you mean they act like it is not there? According to Mozilla the element is removed from the normal document flow, and no space is created for the element in the page layout
   - So no space is created for them, let's show an example, [[file:./015.005.Absolute_Positioning_Example/index.html][here ]]is the example
   - We have 3 boxes that use ~position: absolute~
   - When we offset the element, what is it offset from? Would it be from where its original normal flow position would be?
   - No it would not be from where its original normal flow position would be because no space was created for that element so its "normal flow position" is actually already occupied by some other element because nothing was there previously
   - We see that in the example, the blue ~p~ box that is to the right belongs after the last blue ~p~ box inside the red ~div~ box but the red border ends after the last blue ~p~ box and doesn't create extra space like in the relative positioning and that is because there is no space dedicated for that element
   - So again, what is it offset from? The offset is from the closest descendant element that does not have the default ~position~ or ~position: static~, it can be anything else but the default position
   - If no descendant exists with some other ~position~ then it offsets from the ~body~ element
   - Thus the element will just be placed to whereever you tell it go even if there's elements there or it is outside the body or browser window
   - To the browser that element does not even exists in terms of space because it takes no space
   - Thus if offset it or not, the browser will place the next element to where it should go despite there being an ~absolute~ positioned element because it "doesn't see" it
   - That's why in the example, the last blue ~p~ box is outside the window because I didn't offset it but also to the browser the last box was the previous one (inside the red box) because the space doesn't exists for the one that is outside the body
   - Again, the browser will place elements where they go ignoring ~absolute~ positioned elements because they do not have space dedicated and thus can lead to overlapping elements
   
** Section 15.6: Fixed Positioning
   - ~fixed~ positioning is very similiar to ~absolute~ positioning; the only difference what the elements are offsetting from
   - In ~absolute~ positioning the elements are offsetting from the closest positioned (element that has ~position~ to be anything besides ~static~ - default) ancestor
   - In ~fixed~ positioning the elements are offsetting from the browser window (the window screen that you are viewing, the viewport, the browser window that allows you to see so if maximize or minimize the browser thus the browser window changes because the browser window is basically the tab in the browser, this is not related to any elements, this is related to the browser and what you are able to see in the browser)
   - It positions the element in relation to the browser window
   - Therefore, when a user scrolls down the page, it stays in the exact same place (the elements do not move)
   - This can cause elements to overlap because as you scroll down or up the elements stay in the exact same place even though new elements appear
   - Recall, ~fixed~ positioning is a type of absolute positioning thus it does not take up space (just like ~absolute~ positioning)
   - [[file:./015.006.Fixed_Positioning_Example/index.html][Here]] is an example

** Section 15.7: Overlapping Elements
   - When you use relative, fixed, or absolute positioning, boxes can overlap as shown in the previous example in 15.4
   - If boxes do overlap, the elements that appear /later/ in the HTML doc (HTML code) will sit on the top between overlapping elements
   - If you want to control which element sits on top, you can use the ~z-index~ property
   - Its value is a number, and the higher the number the closer that element is to the front (e.g. an element with a ~z-index~ of 10 will appear over the top of one with a ~z-index~ of 5
   - ~z-index~ is sometimes referred to as the stacking context (as if the blocks have been stacked on top of each other on a z-axis)
   - Let' try it, [[file:./015.007.Overlapping_Elements_Example/index.html][here]] is the example
   - The offset properites (~top~, ~bottom~, ~left~, and ~right~) and the ~z-index~ are tricky subjects
   - But in the example it shows when an element is brought to the front and when an element is sent to the back

** Section 15.8: Floating Elements
   - The ~float~ property allows you to take an element in *normal flow* and place it as far to the left or right of the *containing* element as possible
   - Anything else that sits inside the containing element will flow around the element that is floated
   - [[file:./015.007.Floating_Elements_Example/index.html][Here]] is an example
   - When you use the ~float~ property, you should also use the ~width~ property to indicate how wide the floated should be, if you do not, results can be inconsistent but the box is likely to take up the full width of the containing element (just like it would in normal flow)
   - Thus if you use ~width~ with the floated element and it is less than 100% (full width of the containing element) then the next element will start in that same line with the little width that is left over
   - As you can see in the example, the first paragraph is given a width of 90% and floated to the left so the next element starts on the right of the element in 10% of space that is left and once it passes the height of the floating element it continues to take up the designated width
   - One thing to note in the example is the first floated element and its next sibling. It looks like its sibling does flow around the floated element but the actual element acts like if its not there, what do you mean by that? Well we see the sentences take up the rest 10% of width but the element takes up the entire width, not just the 10%, despite there being a floated element, well that is because it acts like the floated element is not there
   - How can that be? Well according to [[https://developer.mozilla.org/en-US/docs/Web/CSS/float][Mozilla docs]] and [[https://stackoverflow.com/questions/2062258/floating-elements-within-a-div-floats-outside-of-div-why][Stackoverflow]], "float elements are removed from the normal flow of the page though still remaining a part of the flow"
   - That means it is no longer in normal flow and thus why other elements take up the space but it is still in flow which is why the content of the elements wrap around the floating elements (it is a bit tricky and more research is needed to understand it)

** Section 15.9: Using Float to Place Elements Side-By-Side
   - A lot of layouts place boxes next to each other and the ~float~ property is commonly used to achieve this
   - When elements are floated, the height of the boxes can affect where the following elements sit
   - What do you mean by this? Well if one the elements height is large and others are small then in the same "line" (e.g. to the right of the tall element) it may be able to fit two small elements or at least start to the second element
   - The second element could potentially could be taller (in addition to the element on top of it) than the taller element
   - Thus when new elements are introduced where they start could be all over the place because each element has a different height
   - For example, I did created a webpage [[file:./015.009.Float_Side_by_Side_Example/index.html][here]]
   - The the second div you can see that the paragraph elements are not perfectly aligned and that is because the boxes have different heights
   - The third div are the same boxes but now they are aligned because each box has the same height
   - Since the paragraph boxes are floating elements that means they are out of normal flow so the technically the div doesn't see anything and has a zero height but we can fix that by introducing ~display: flow-root~ to the div to make it have height of the tallest paragraph box
   - However, how can you set the height of a box if the content may change like when adjut the window or if you do not know ahead of time what the content will be
   - Instead the better approach would be to use the ~clear~ property

** Section 15.10: Clearing Floats
   - 
     

* Keywords
| Term                 | Definition                                                                                                                                                                                                                                                                                                                                                                 |
|----------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Block-level box      | Boxes that start on a new line and act as the main building blocks of any layout                                                                                                                                                                                                                                                                                           |
| Inline-level box     | Boxes that flow between surrounding text                                                                                                                                                                                                                                                                                                                                   |
| Normal Flow Position | Every block-level element appears on a new line even if there is space in the current line thus causing each item to appear lower down the page than the previous one                                                                                                                                                                                                      |
| Relative Positioning | This moves an element from the position it would be in normal flow, shifting it to the top, right, bottom, or left of where it would have been placed (this does not affect the position of surrounding elements; they stay in the position they would be in normal flow). Also the element will only take up space of where its original position in normal flow would be |
| Absolute Positioning | This positions the element in relation to its containing (closest positioned ancestor) element as it is taken out of normal flow meaning that it does not affect the position of any surrounding elements as they simply ignore the space it would have taken up (basically moves the element to the offset designation and the element does not take up space like relative positioning)    |
| Fixed Positioning    | This is a form of absolute positioning that positions the element in relation to the browser window, as opposed to the containing element (unlike absolute positioning when you scroll the elements move out of the window view, fixed positioning makes the elements stay in place and thus it is always inside the browser window)                                       |
| Floating Elements    | Floating an element allows you to take that element out of normal flow and position it to the far left or right of a containing box allowing other elements to "flow" around it of the space it has left if the width is less than 100% basically if there is space from the width of the containing element then the next element will start and be placed there          |


* Questions
  - *Q*: How does the offset properties (~top~, ~bottom~, ~left~, and ~right~) and the ~z-index~ work?
  - *Q*: What is sticky positioning?
  - *Q*: What does it mean "float elements are removed from the normal flow of the page though still remaining a part of the flow"?
  - *Q*: What is ~display: flow-root~?
    
* Summary
  - CSS treats each HTML element as if it is in its own box
  - The box is either block-level box (which start on a new line and act as the main building blocks of any layout) or inline-level box (which flow between surrounding text)
  - There may be nested block-level elements and the block-level element that contains the nested block-level elements are referred to as the containing element or direct parent of the nested block elements

* Resource
  - [[https://developer.mozilla.org/en-US/docs/Web/CSS/position][Mozilla Docs - CSS Position]]
  - [[https://stackoverflow.com/questions/45784777/what-is-a-positioned-ancestor#:~:text=When%20referring%20to%20positioned%20ancestor,ancestors%20we%20mean%20the%20closest.][Stackoverflow - What is a Positioned Ancestor]]
  - [[https://css-irl.info/finding-an-elements-nearest-relative-positioned-ancestor/][Finding an Element's Nearest Relative Positioned Ancestor]]
  - [[https://developer.mozilla.org/en-US/docs/Web/CSS/float][Mozilla Docs - Float]]
  - [[https://stackoverflow.com/questions/2062258/floating-elements-within-a-div-floats-outside-of-div-why][Stackoverflow - Floating Elements within a Div, Floats Outside of Div. Why?]]
