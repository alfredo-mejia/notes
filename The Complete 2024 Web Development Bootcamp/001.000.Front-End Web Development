#+title: 001.Front-End Web Development
#+author: Alfredo Mejia

* Section 1.1: What You'll Get In This Course
- Dr.Angela is part of a company that teaches people how to code in person
- The in-person bootcamp is the same course as the Udemy course
- The course is project-drive (great!)

* Section 1.2: The Syllabus
- The company's name is the 'The App Brewery'
- Approximately 3-4 months
- You'll learn HTML 5, CSS 3, FlexBox, Grid, Bootstrap, Web Design, Document Object Model (DOM), JavaScript ES6, React.JS, Unix, Git, GitHub, Node.JS, Express.JS, APIs, Database, SQL, Postgres, Deployment, RESTful APIs, Authentication, Security, Web3, BlockChain, Crypto Token, NFT, and more

* Section 1.3: 12 Rules to Learn to Code
01. Trick Your Brain with the 20 Minute Rule
    - In order to become better programmers we must code throughout varies days
    - Task-switching is hard so once we set up to see TV it is hard for us to swtich and code
    - Instead, after work, try to set aside 20 minutes to code and you'll see you will spend more than 20 minutes because we have "inertia", in other words, we often don't like to swtich tasks
    - Finally, develop a habit by repeatly coding; after a month we will be naturally inclined to continue that habit

02. Code for a Purpose
    - Following tutorials making simple programs  and copying the code line by line is boring and will drain your motivation
    - The best tutorials are the tutorials creating projects that can actually be used
    - The best way to motivate yourself is by making your own projects
    - After each section (topic) try to create your own project with what you have learned so far

03. There is No "Perfect" Language to Learn
    - A programming language is simply a tool
    - It doesn't matter which programming language you start, different programming languages are used for different tasks
    - We must pick the best tool for a specific task

04. Understand What You're Writing
    - Many tutorials promise to teach you how to build an app but following line by line can lead to confusion because sometimes we don't know what we are typing
    - Do try to do this tutorials
    - Tutorials should be able to explain what they are doing so you can understand what you are writing
    - Also, take tutorials that are at your level, too advance might also lead to confusion and thus you'll not learn anything
    - Build a ramp for your journey; too steep and you'll get lost, too shallow and it will be boring for you

05. It's Ok to Not Know
    - It is common for programmers to have imposter syndrome and undermine their abilities
    - It is okay to ask for help and find references / suggestions online
    - The skill to have is asking good questions and understanding the answer

06. Be a Copycat
    - Books are great references but to truly learn something you need to make something
    - If you lack ideas, be a copycat (e.g. make your own notepad, MSPaint, Tetris, Flappy Bird, etc.)

07. Be Accountable
    - Online courses is hard to have accountability because you have no one checking or immediate reward like a grade
    - Accountability and commitment to learning is needed
    - One way to ensure accountability and commitment is to find a coding buddy near the same level as you so both can learn from each other
    - You can find a coding buddy online in FB groups, subreddits, discords, etc. 
    - Find internal and external motivation like financial motivation; for example, think about how much worth is this skill or buy a library card dedicated to be able to go and continue this course, you'll have a motivation to go and do the course because you are paying for the library card
    - Try and get assessed on your own work (it is important to get feedback)
    - A good way to be held accountable is to find a mentor

08. Keep Learning
    - To stay relevant, you have to keep reinventing yourself
    - There is always new trends, new technologies, and new languages so we need to keep learning to not be left behind
    - Keep learning, stay relevant

09. Play Foosball
    - Many of the times we left thinking and confused looking at our code either because of a bug or trying to figure out a way to solve an issue
    - Sometimes it is worth stepping away from your code and giving it some time and distance
    - Code less, think more because poorly thought code can become more code lines than expected due to having to rewrite / discover the bugs
    - Easiest code to get rid of is the code that was never written

10. Get a Mentor
    - Pair programming is an agile software development technique where a learner and a mentor sit down at the same workstation and work on a problem
    - The learner writes code and the mentor reviews the code but the mentor can dispose of dedcades of accumulated wisdown that can lead to improvements in your abilities
    - The mentor shouldn't give you the answers but ask you questions to get you to think for yourself
    - Information is cheap, learn to think, approach a problem, break down a problem, frame problem, etc.
    - Meet a mentor online or in a local meetup (e.g. www.meetup.com)
    - To find a mentor, offer your help in exchange of theirs, no one wants to throw away their free time for some stranger

11. Get Into The Habit of Chunking
    - If you have a complicated idea break down the program into chunks
    - Then break the chunks (modules) down even further
    - New ideas will emerge from the chunks
    - The more that you break down the probelm and define the issue, the easier it is to package your code into bite-sized chunks
    - The simpler the chunk, the easier it is to tackle
    - To solve a problem, break down the problem into solvable chunks

12. Break Someone Else's Code
    - Every programmer needs help
    - If you find a code snippet, break it down, understand it, and then use it; possibly later in a different scenario the same principles will be applied
    - Always test your assumptions against the outcome
    - Go to GitHub search up any project (Instgram-clone, Snapchat-clone, Flappy-Bird, etc.) you will find countless open source projects, pick one and download it
    - After finding an open source project, break down the code, tear down the code, break the code, ask yourself various questions about the code, understand how it was built, and finally make your own modifications to the code
    - Once you become good at understanding other people's code, then you'll be able to reverse engineer various apps and make your own from scratch so you can compare with the original
