#+title: 004.000.HTML Next Steps & Semantics
#+author: Alfredo Mejia

[[file:./004.HTML Next Steps & Semantics Slides.pdf][HTML Next Steps & Semantics Slides]]

* HTML Next Steps & Semantics (Notes)

** Section 4.1: What Matters In This Section
   - The crucial components of this section are: understanding what HTML is, block vs inline elements, span and div elements, semantic elements (header, footer, nav, etc.)
   - Nice to have (or understand) of this section are: sub element, horizontal break element, sup element, and break element

** Section 4.2: What Exactly Is HTML5?
   - [[https://developer.mozilla.org/en-US/docs/Glossary/HTML5][Mozilla HTML5]]
   - HTML5 refers to new version of HTML with new elements but also a set of modern web technologies (e.g. new JS APIs)
   - The way HTML works is not a download instead it is a set of instructions in how HTML should work and the browser takes these instructions and build and render the webpage
   - Think of HTML as the blueprint while the browser builds the blueprint
   - [[https://html.spec.whatwg.org][HTML Living Standard Spec]] - a link that explains how each element and how HTML should work
   - So think of HTML5 as new way to create a blueprint or basically new specs for HTML (hence HTML5)
   - Basically each browser has HTML5 "turned on" and you can specify the version of HTML with the ~DOCTYPE~ but it won't turn off HTML5 in the browser
   - For example, if you use an older version of HTML but add HTML5 elements the browser will still render them because the browsers are built for HTML5 so the ~DOCTYPE~ simply informs the browser which HTML you are using but does not do much beside that
     
** Section 4.3: Block vs Inline Elements (Divs and Spans)
   - Inline elements fit in alongise other elements 
   - Block level elements take up a whole "block" of space or the entire width of it's parent's width
   - This behavior can be changed with CSS later
   - Divs and Spans are generic containers
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div][Mozilla Div Element]]
   - Div element is a generic container for flow content and it has no effect on the content or layout until styled in some way using CSS (applying some styling or layout model)
   - Basically, div is a generic container to group / hold elements together and it is a block-level element
   - Why would you use div? You'll use this to group content together and stylize it together
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span][Mozilla Span Element]]
   - Span element is a generic container (but unlike the block-level div element) and it is an inline container for phrasing content
   - It can be used to group elements for styling purposes and it very much like the div element but div is a block-level element whereas a span element is an inline-level element
   - Span is just a generic container and styling can be added (e.g. you have a paragraph with a ingredients and you want to color that red so you wrap around the ingredients with a span element to stylize it)

** Section 4.4: An Odd Assortment of Elements: HR, BR, Sup, & Sub
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr][Thematic Break (Horizontal Rule) Element]] - A self-closing element that represents a thematic break between paragraph-level elements (e.g. a change of scene or a shift in topic)
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/br][Line Break Element]] - A self-closing element that produces a line break in text and it is useful for writing a poem or an address where the division of lines is significant
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sup][Superscript Element]] - A HTML element that specifies inline text which is suppose to be displayed as superscript for solely typographical reasons (usually rendered with a raised baseline using smaller text)
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/sub][Subscript Element]] - A HTML that specifies inline text which should be displayed as subscript for solely typographical reasons (usally rendered with a lowered baseline using smaller text)

** Section 4.5: Entity Codes
   - HTML entities are special codes or speical sequeneces that we can use inside of our HTML that will result in different characters
   - You'll start with an ampersand and end with a semicolon; normally used to display reserved characters that normally would be invalid or used in place of difficult to type characters
   - The browser interprets them and renders the correct character instead
   - [[https://html.spec.whatwg.org/multipage/named-characters.html][List of HTML Entity Codes]]
   - Entities have names and numbers to display certain characters
     
** Section 4.6: Intro to Semantic Markup
   - Semantic means relating to meaning, so semantic markup is meaningful markup or markup that relates or pertains to meaning of the content of that element
   - So you ask yourself, what purpose or role does that HTML element have and how does it relate to the content the element is displaying? You try to use a semantic element (when applicable) that clearly describes its meaning to both the browser and the developer
   - There are non-sematic elements like div and span (because those elements don't necesarily mean anything) and semantic elements like form, table, article, etc
   - Many people use div and span but you can use semantic elements like the main element which works the same way as a div but has semantic meaning; it means it is the main content of the page
   - There are semantic elements like header, section, nav, footer, etc. and they all work like div but give meaning they have semantic meaning
   - Why does it matter? Well it adds meaning to our markup which can help web crawlers make more sense of your web page, makes it more friendly to other programs, and it helps accessibility as screen readers can easily interpret nav, header, section and those act as signposts and understand the semantic meaning of the page (e.g. know where the nav is), and finally you make your own code for developers and yourself more code readable
   - There are semantic elements that are like span but have meaning as well like the time element

** Section 4.7: Playing With Semantic Elements
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/main][Mozilla Main Element]] - Represents the dominant conent of the body of a document (directly related to or expands upon the central topic of the document or the central functionality of an application)
   - The main element content should be unique to the document and not repeated contnet such as sidebars, nav links, copyright info, site logos, search forms (unless the search is the main function of the page), etc
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav][Mozilla Navigation Element]] - Rperesents a section of a page whose purpose is to provide navigation links either within the current document or to other documents (e.g. menus, table of contents, indexes, etc.)
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/section][Mozilla Section Element]] - Represents a generic standalone section of a document whcih doesn't have a more specific semantic element to represent it
   - Sections should always have a heading (very few exceptions)
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article][Mozilla Article Element]] - Represetns a self-contained composition in a document page, application, or site which is intended to be independently distributable or reusable
   - Some examples of articles include a forum post, a magazine, newspapaer aticle, blog entry, product car, user-submitted comment, interactive widget or gadget, or any other independent item of content
   - Each article should be identified by typically including a heading as a child of the article element
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/aside][Mozilla Aside Element]] - Represents a portion of a document whose content is only indirectly related to the document's main content (basically not essential to the main content)
   - Asides are frequently presented as sidebars or call-out boxes
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header][Mozilla Header Element]] - Represents introductory content, typically a group of introductory or navigational aids
   - The heading element may contain some heading elements but also a logo, a search form, an author name, and other elements
   - Headers can be nested in other elements and there can be more than one header in a document (this also applies to footers)
   - [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer][Mozilla Footer Element]] - Represents a footer for its nearest ancestor sectioning content or sectioning root elemenet
   - The footer typically contains info about the author of the section, copyright data or links to related documents
   - There are other semantic elements like the [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/time][time element (Mozilla)]], [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/figure][figure element (Mozilla)]] which represents self-contained content with an optional caption and it is referenced as a single unit (images, diagrams, etc.), [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/abbr][abbreviation element (Mozilla)]], [[https://developer.mozilla.org/en-US/docs/Web/HTML/Element/data][data element (mozilla)]], and more

** Section 4.8: Screen reader Demonstration
   - The screen reader can easily distinguish different parts of a web page when semantic elements are used instead of non-semantic elements

** Section 4.9: VSCode Tip: Emmet
   - Emmet is built-in VS Code but has various syntax for shortcuts to create HTML elements; you quickly create child elements, sibling elements, parent elements, etc
   - [[https://emmet.io][Emmet Website]]
     
* Keywords
  - HTML5: 

* Questions
  - Q: What is the difference between section and article? 
  - Q: How should main, header, footer, section, article, etc.?
* Summary
