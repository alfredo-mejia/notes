#+title: Chapter 3: Functions, Methods & Objects
#+author: Alfredo Mejia
#+options: num:nil html-postamble:nil
#+html_head: <link rel="stylesheet" type="text/css" href="../../resources/bulma/bulma.css" /> <style>body {margin: 5%} h1,h2,h3,h4,h5,h6 {margin-top: 3%}</style>

* Navigation
| Nav   | Title                                                       | Links                                   |
|-------+-------------------------------------------------------------+-----------------------------------------|
| Index | Notes Home                                                  | \vert [[file:../../index.html][html]] \vert [[file:../../index.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main][github]] \vert |
| Home  | JavaScript & JQuery - Interactive Front-end Web Development | \vert [[file:../000.Home.html][html]] \vert [[file:../000.Home.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/JavaScript_and_JQuery_Interactive_Frontend_Web_Development][github]] \vert |
| Prev  | Chapter 2: Basic JavaScript Instructions                    | \vert [[file:../002.Basic_JavaScript_Instructions/002.000.Notes.html][html]] \vert [[file:../002.Basic_JavaScript_Instructions/002.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/JavaScript_and_JQuery_Interactive_Frontend_Web_Development/002.Basic_JavaScript_Instructions][github]] \vert |
| Next  | Chapter 4: Decisions & Loops                                | \vert [[file:../004.Decisions_and_Loops/004.000.Notes.html][html]] \vert [[file:../004.Decisions_and_Loops/004.000.Notes.org][org]] \vert [[https://github.com/alfredo-mejia/notes/tree/main/JavaScript_and_JQuery_Interactive_Frontend_Web_Development/004.Decisions_and_Loops][github]] \vert |

* Notes

** Section 3.1: What is a Funtion?
   - A function is a reusable group of series of statements that perform a specific task
   - Grouping together statements required to perform a task helps organize code
   - Functions are not automatically performed, a function must be "called" or "invoked" to perform the steps inside the function thus functions are only performed when needed
   - The function must be given a name to invoke it later, this is known as "calling" the function
   - A function is created in a code block and some functions need info to be passed along to the function, these are called parameters
   - For example, if you a function that calculates area then you need the height and width as input the function so height and width will be the parameters
   - Some functions might return a response too and this is called a return value
   - For example, the function that calculates area might want to return the value to whoever called it so the return value will be the area calculated from the parameters
   - There are other functions called anonymous functions which do not have a name so they cannot be called but instead are executed as soon as the interpreter comes across them

*** Section 3.1.1: Declaraing a Function
    - In JS, a function declaration is a function with a name with a code block and inside the code blockwe have statements that achieves a task
    - You declare a functionusing the ~function~ keyword
    - For example:

    #+BEGIN_SRC JavaScript
      function sayHello(){
        document.write('Hello!');
      }
    #+END_SRC

    - Some functions will need information from the caller
    - The functions that need information will have to be declared with parameters
    - Once the parameters are declared for the function inside the function the parameters will act like regular variables
    - The parameters are delcared inside the parentheses after the function name and each name given acts like a variable name inside the function
    - For example:

    #+BEGIN_SRC JavaScript
      function getArea(width, height) {
        return width* height;
      }
    #+END_SRC

    - ~width~ and ~height~ are the parameters to function ~getArea()~
    - The function will return the value of the calculation to the caller
    - In addition, each time this function is called then the caller will need to specify a width and a height

*** Section 3.1.2: Calling a Function
    - Once the function has been declared you can then execute the statements inside the function by calling the function
    - You can call the same function as many times as you want
    - For example:

    #+BEGIN_SRC JavaScript
     sayHello();	
    #+END_SRC

    - In JS, you can call a function before it has been declared because the interpreter runs through the script before executing each statement so it will know what function is being referred
    - However it is good practice to declare them before using them because many other languages require for functions to be declared before using so it would be a good habit to develop
    - Some functions may require arguments
    - When you call a function that has parameters you specify the values it should use in the parentheses that follow its name
    - The values given by the caller are called arguments and these arguments may be variables or literal values
    - Each time you invoke the function it can be different variables and literals, it does not need to be the same values
    - For example:

    #+BEGIN_SRC JavaScript
      getArea(3,5);

      let width = 3;
      let height =5;

      getArea(width, height);
    #+END_SRC

    - *Arguments vs. Parameters*: Arguments are the values passed by the caller and parameters are the variables used by the callee

*** Section 3.1.X Functions vs Methods

* Keywords

| Term | Definition |
|------+------------|
|      |            |

* Questions
  - *Q*:

* Summary
